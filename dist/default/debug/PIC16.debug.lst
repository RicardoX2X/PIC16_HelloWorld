

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Thu Aug 31 02:11:28 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x7E,2
    30     0000                     
    31                           ; Generated 22/03/2023 GMT
    32                           ; 
    33                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F887 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65     0000                     	;# 
    66     0001                     	;# 
    67     0002                     	;# 
    68     0003                     	;# 
    69     0004                     	;# 
    70     0005                     	;# 
    71     0006                     	;# 
    72     0007                     	;# 
    73     0008                     	;# 
    74     0009                     	;# 
    75     000A                     	;# 
    76     000B                     	;# 
    77     000C                     	;# 
    78     000D                     	;# 
    79     000E                     	;# 
    80     000E                     	;# 
    81     000F                     	;# 
    82     0010                     	;# 
    83     0011                     	;# 
    84     0012                     	;# 
    85     0013                     	;# 
    86     0014                     	;# 
    87     0015                     	;# 
    88     0015                     	;# 
    89     0016                     	;# 
    90     0017                     	;# 
    91     0018                     	;# 
    92     0019                     	;# 
    93     001A                     	;# 
    94     001B                     	;# 
    95     001B                     	;# 
    96     001C                     	;# 
    97     001D                     	;# 
    98     001E                     	;# 
    99     001F                     	;# 
   100     0081                     	;# 
   101     0085                     	;# 
   102     0086                     	;# 
   103     0087                     	;# 
   104     0088                     	;# 
   105     0089                     	;# 
   106     008C                     	;# 
   107     008D                     	;# 
   108     008E                     	;# 
   109     008F                     	;# 
   110     0090                     	;# 
   111     0091                     	;# 
   112     0092                     	;# 
   113     0093                     	;# 
   114     0093                     	;# 
   115     0093                     	;# 
   116     0094                     	;# 
   117     0095                     	;# 
   118     0096                     	;# 
   119     0097                     	;# 
   120     0098                     	;# 
   121     0099                     	;# 
   122     009A                     	;# 
   123     009B                     	;# 
   124     009C                     	;# 
   125     009D                     	;# 
   126     009E                     	;# 
   127     009F                     	;# 
   128     0105                     	;# 
   129     0107                     	;# 
   130     0108                     	;# 
   131     0109                     	;# 
   132     010C                     	;# 
   133     010C                     	;# 
   134     010D                     	;# 
   135     010E                     	;# 
   136     010F                     	;# 
   137     0185                     	;# 
   138     0187                     	;# 
   139     0188                     	;# 
   140     0189                     	;# 
   141     018C                     	;# 
   142     018D                     	;# 
   143     0000                     	;# 
   144     0001                     	;# 
   145     0002                     	;# 
   146     0003                     	;# 
   147     0004                     	;# 
   148     0005                     	;# 
   149     0006                     	;# 
   150     0007                     	;# 
   151     0008                     	;# 
   152     0009                     	;# 
   153     000A                     	;# 
   154     000B                     	;# 
   155     000C                     	;# 
   156     000D                     	;# 
   157     000E                     	;# 
   158     000E                     	;# 
   159     000F                     	;# 
   160     0010                     	;# 
   161     0011                     	;# 
   162     0012                     	;# 
   163     0013                     	;# 
   164     0014                     	;# 
   165     0015                     	;# 
   166     0015                     	;# 
   167     0016                     	;# 
   168     0017                     	;# 
   169     0018                     	;# 
   170     0019                     	;# 
   171     001A                     	;# 
   172     001B                     	;# 
   173     001B                     	;# 
   174     001C                     	;# 
   175     001D                     	;# 
   176     001E                     	;# 
   177     001F                     	;# 
   178     0081                     	;# 
   179     0085                     	;# 
   180     0086                     	;# 
   181     0087                     	;# 
   182     0088                     	;# 
   183     0089                     	;# 
   184     008C                     	;# 
   185     008D                     	;# 
   186     008E                     	;# 
   187     008F                     	;# 
   188     0090                     	;# 
   189     0091                     	;# 
   190     0092                     	;# 
   191     0093                     	;# 
   192     0093                     	;# 
   193     0093                     	;# 
   194     0094                     	;# 
   195     0095                     	;# 
   196     0096                     	;# 
   197     0097                     	;# 
   198     0098                     	;# 
   199     0099                     	;# 
   200     009A                     	;# 
   201     009B                     	;# 
   202     009C                     	;# 
   203     009D                     	;# 
   204     009E                     	;# 
   205     009F                     	;# 
   206     0105                     	;# 
   207     0107                     	;# 
   208     0108                     	;# 
   209     0109                     	;# 
   210     010C                     	;# 
   211     010C                     	;# 
   212     010D                     	;# 
   213     010E                     	;# 
   214     010F                     	;# 
   215     0185                     	;# 
   216     0187                     	;# 
   217     0188                     	;# 
   218     0189                     	;# 
   219     018C                     	;# 
   220     018D                     	;# 
   221     0000                     	;# 
   222     0001                     	;# 
   223     0002                     	;# 
   224     0003                     	;# 
   225     0004                     	;# 
   226     0005                     	;# 
   227     0006                     	;# 
   228     0007                     	;# 
   229     0008                     	;# 
   230     0009                     	;# 
   231     000A                     	;# 
   232     000B                     	;# 
   233     000C                     	;# 
   234     000D                     	;# 
   235     000E                     	;# 
   236     000E                     	;# 
   237     000F                     	;# 
   238     0010                     	;# 
   239     0011                     	;# 
   240     0012                     	;# 
   241     0013                     	;# 
   242     0014                     	;# 
   243     0015                     	;# 
   244     0015                     	;# 
   245     0016                     	;# 
   246     0017                     	;# 
   247     0018                     	;# 
   248     0019                     	;# 
   249     001A                     	;# 
   250     001B                     	;# 
   251     001B                     	;# 
   252     001C                     	;# 
   253     001D                     	;# 
   254     001E                     	;# 
   255     001F                     	;# 
   256     0081                     	;# 
   257     0085                     	;# 
   258     0086                     	;# 
   259     0087                     	;# 
   260     0088                     	;# 
   261     0089                     	;# 
   262     008C                     	;# 
   263     008D                     	;# 
   264     008E                     	;# 
   265     008F                     	;# 
   266     0090                     	;# 
   267     0091                     	;# 
   268     0092                     	;# 
   269     0093                     	;# 
   270     0093                     	;# 
   271     0093                     	;# 
   272     0094                     	;# 
   273     0095                     	;# 
   274     0096                     	;# 
   275     0097                     	;# 
   276     0098                     	;# 
   277     0099                     	;# 
   278     009A                     	;# 
   279     009B                     	;# 
   280     009C                     	;# 
   281     009D                     	;# 
   282     009E                     	;# 
   283     009F                     	;# 
   284     0105                     	;# 
   285     0107                     	;# 
   286     0108                     	;# 
   287     0109                     	;# 
   288     010C                     	;# 
   289     010C                     	;# 
   290     010D                     	;# 
   291     010E                     	;# 
   292     010F                     	;# 
   293     0185                     	;# 
   294     0187                     	;# 
   295     0188                     	;# 
   296     0189                     	;# 
   297     018C                     	;# 
   298     018D                     	;# 
   299                           
   300                           	psect	idataBANK0
   301     044B                     __pidataBANK0:
   302                           
   303                           ;initializer for _BackLight_State
   304     044B  3408               	retlw	8
   305                           
   306                           	psect	strings
   307     0004                     __pstrings:
   308     0004                     stringtab:
   309     0004                     __stringtab:
   310                           
   311                           ;	String table - string pointers are 1 byte each
   312     0004  1BFF               	btfsc	btemp+1,7
   313     0005  280E               	ljmp	stringcode
   314     0006  1383               	bcf	3,7
   315     0007  187F               	btfsc	btemp+1,0
   316     0008  1783               	bsf	3,7
   317     0009  0800               	movf	0,w
   318     000A  0A84               	incf	4,f
   319     000B  1903               	skipnz
   320     000C  0AFF               	incf	btemp+1,f
   321     000D  0008               	return
   322     000E                     stringcode:
   323     000E                     stringdir:
   324     000E  3000               	movlw	high stringdir
   325     000F  008A               	movwf	10
   326     0010  0804               	movf	4,w
   327     0011  0A84               	incf	4,f
   328     0012  0782               	addwf	2,f
   329     0013                     __stringbase:
   330     0013  3400               	retlw	0
   331     0014                     __end_of__stringtab:
   332     0014                     _dpowers:
   333     0014  3401               	retlw	1
   334     0015  3400               	retlw	0
   335     0016  340A               	retlw	10
   336     0017  3400               	retlw	0
   337     0018  3464               	retlw	100
   338     0019  3400               	retlw	0
   339     001A  34E8               	retlw	232
   340     001B  3403               	retlw	3
   341     001C  3410               	retlw	16
   342     001D  3427               	retlw	39
   343     001E                     __end_of_dpowers:
   344     001E                     STR_1:
   345     001E  3452               	retlw	82	;'R'
   346     001F  3469               	retlw	105	;'i'
   347     0020  3463               	retlw	99	;'c'
   348     0021  3461               	retlw	97	;'a'
   349     0022  3472               	retlw	114	;'r'
   350     0023  3464               	retlw	100	;'d'
   351     0024  346F               	retlw	111	;'o'
   352     0025  3400               	retlw	0
   353     0026                     STR_2:
   354     0026  3444               	retlw	68	;'D'
   355     0027  3461               	retlw	97	;'a'
   356     0028  346E               	retlw	110	;'n'
   357     0029  3469               	retlw	105	;'i'
   358     002A  3465               	retlw	101	;'e'
   359     002B  346C               	retlw	108	;'l'
   360     002C  3400               	retlw	0
   361     002D                     STR_3:
   362     002D  3425               	retlw	37	;'%'
   363     002E  3464               	retlw	100	;'d'
   364     002F  3400               	retlw	0
   365                           
   366                           	psect	nvBANK0
   367     0034                     __pnvBANK0:
   368     0034                     _i2c_add:
   369     0034                     	ds	1
   370     0013                     _SSPBUF	set	19
   371     0014                     _SSPCON	set	20
   372     0063                     _SSPIF	set	99
   373     0047                     _RD7	set	71
   374     0093                     _SSPADD	set	147
   375     0094                     _SSPSTAT	set	148
   376     0091                     _SSPCON2	set	145
   377     0088                     _TRISD	set	136
   378     048B                     _RCEN	set	1163
   379     048E                     _ACKSTAT	set	1166
   380     048C                     _ACKEN	set	1164
   381     048D                     _ACKDT	set	1165
   382     048A                     _PEN	set	1162
   383     0489                     _RSEN	set	1161
   384     0488                     _SEN	set	1160
   385     043C                     _TRISC4	set	1084
   386     043B                     _TRISC3	set	1083
   387                           
   388                           	psect	cinit
   389     07F5                     start_initialization:	
   390                           ; #config settings
   391                           
   392     07F5                     __initialization:
   393                           
   394                           ; Initialize objects allocated to BANK0
   395     07F5  120A  118A  244B  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   396     07FA  00B6               	movwf	__pdataBANK0& (0+127)
   397                           
   398                           ; Clear objects allocated to BANK0
   399     07FB  01B5               	clrf	__pbssBANK0& (0+127)
   400     07FC                     end_of_initialization:	
   401                           ;End of C runtime variable initialization code
   402                           
   403     07FC                     __end_of__initialization:
   404     07FC  0183               	clrf	3
   405     07FD  120A  118A  2DEF   	ljmp	_main	;jump to C main() function
   406                           
   407                           	psect	bssBANK0
   408     0035                     __pbssBANK0:
   409     0035                     _RS:
   410     0035                     	ds	1
   411                           
   412                           	psect	dataBANK0
   413     0036                     __pdataBANK0:
   414     0036                     _BackLight_State:
   415     0036                     	ds	1
   416                           
   417                           	psect	cstackCOMMON
   418     0071                     __pcstackCOMMON:
   419     0071                     ?_I2C_Master_Init:
   420     0071                     ??_I2C_Master_Init:	
   421                           ; 1 bytes @ 0x0
   422                           
   423     0071                     ?_LCD_Init:	
   424                           ; 1 bytes @ 0x0
   425                           
   426     0071                     ?_IO_Expander_Write:	
   427                           ; 1 bytes @ 0x0
   428                           
   429     0071                     ?_LCD_CMD:	
   430                           ; 1 bytes @ 0x0
   431                           
   432     0071                     ?_main:	
   433                           ; 1 bytes @ 0x0
   434                           
   435     0071                     ?_I2C_Master_Wait:	
   436                           ; 1 bytes @ 0x0
   437                           
   438     0071                     ??_I2C_Master_Wait:	
   439                           ; 1 bytes @ 0x0
   440                           
   441     0071                     ?_I2C_Master_Start:	
   442                           ; 1 bytes @ 0x0
   443                           
   444     0071                     ??_I2C_Master_Start:	
   445                           ; 1 bytes @ 0x0
   446                           
   447     0071                     ?_I2C_Master_Stop:	
   448                           ; 1 bytes @ 0x0
   449                           
   450     0071                     ??_I2C_Master_Stop:	
   451                           ; 1 bytes @ 0x0
   452                           
   453     0071                     ?_I2C_Master_Write:	
   454                           ; 1 bytes @ 0x0
   455                           
   456     0071                     ??_I2C_Master_Write:	
   457                           ; 1 bytes @ 0x0
   458                           
   459     0071                     ?_LCD_Write_4Bit:	
   460                           ; 1 bytes @ 0x0
   461                           
   462     0071                     ?_LCD_Write_Char:	
   463                           ; 1 bytes @ 0x0
   464                           
   465     0071                     ?___lwdiv:	
   466                           ; 1 bytes @ 0x0
   467                           
   468     0071                     I2C_Master_Write@data:	
   469                           ; 2 bytes @ 0x0
   470                           
   471     0071                     ___lwdiv@divisor:	
   472                           ; 1 bytes @ 0x0
   473                           
   474                           
   475                           ; 2 bytes @ 0x0
   476     0071                     	ds	1
   477     0072                     ??_IO_Expander_Write:
   478     0072                     IO_Expander_Write@Data:	
   479                           ; 1 bytes @ 0x1
   480                           
   481                           
   482                           ; 1 bytes @ 0x1
   483     0072                     	ds	1
   484     0073                     ??_LCD_Write_4Bit:
   485     0073                     ___lwdiv@dividend:	
   486                           ; 1 bytes @ 0x2
   487                           
   488                           
   489                           ; 2 bytes @ 0x2
   490     0073                     	ds	1
   491     0074                     LCD_Write_4Bit@Nibble:
   492                           
   493                           ; 1 bytes @ 0x3
   494     0074                     	ds	1
   495     0075                     ??_LCD_CMD:
   496     0075                     ??_LCD_Write_Char:	
   497                           ; 1 bytes @ 0x4
   498                           
   499     0075                     ??___lwdiv:	
   500                           ; 1 bytes @ 0x4
   501                           
   502     0075                     ___lwdiv@quotient:	
   503                           ; 1 bytes @ 0x4
   504                           
   505                           
   506                           ; 2 bytes @ 0x4
   507     0075                     	ds	1
   508     0076                     LCD_CMD@CMD:
   509     0076                     LCD_Write_Char@Data:	
   510                           ; 1 bytes @ 0x5
   511                           
   512                           
   513                           ; 1 bytes @ 0x5
   514     0076                     	ds	1
   515     0077                     ??_LCD_Init:
   516     0077                     ?_LCD_Set_Cursor:	
   517                           ; 1 bytes @ 0x6
   518                           
   519     0077                     ?_LCD_Write_String:	
   520                           ; 1 bytes @ 0x6
   521                           
   522     0077                     LCD_Set_Cursor@COL:	
   523                           ; 1 bytes @ 0x6
   524                           
   525     0077                     ___lwdiv@counter:	
   526                           ; 1 bytes @ 0x6
   527                           
   528     0077                     LCD_Write_String@Str:	
   529                           ; 1 bytes @ 0x6
   530                           
   531                           
   532                           ; 2 bytes @ 0x6
   533     0077                     	ds	1
   534     0078                     ??_LCD_Set_Cursor:
   535     0078                     ?___lwmod:	
   536                           ; 1 bytes @ 0x7
   537                           
   538     0078                     ___lwmod@divisor:	
   539                           ; 2 bytes @ 0x7
   540                           
   541                           
   542                           ; 2 bytes @ 0x7
   543     0078                     	ds	1
   544     0079                     ??_LCD_Write_String:
   545                           
   546                           ; 1 bytes @ 0x8
   547     0079                     	ds	1
   548     007A                     LCD_Init@I2C_Add:
   549     007A                     LCD_Set_Cursor@ROW:	
   550                           ; 1 bytes @ 0x9
   551                           
   552     007A                     ___lwmod@dividend:	
   553                           ; 1 bytes @ 0x9
   554                           
   555                           
   556                           ; 2 bytes @ 0x9
   557     007A                     	ds	2
   558     007C                     ??___lwmod:
   559     007C                     ___lwmod@counter:	
   560                           ; 1 bytes @ 0xB
   561                           
   562     007C                     LCD_Write_String@i:	
   563                           ; 1 bytes @ 0xB
   564                           
   565                           
   566                           ; 2 bytes @ 0xB
   567     007C                     	ds	2
   568                           
   569                           	psect	cstackBANK0
   570     0020                     __pcstackBANK0:
   571     0020                     ?_sprintf:
   572     0020                     sprintf@f:	
   573                           ; 2 bytes @ 0x0
   574                           
   575                           
   576                           ; 1 bytes @ 0x0
   577     0020                     	ds	3
   578     0023                     ??_sprintf:
   579                           
   580                           ; 1 bytes @ 0x3
   581     0023                     	ds	3
   582     0026                     sprintf@ap:
   583                           
   584                           ; 1 bytes @ 0x6
   585     0026                     	ds	1
   586     0027                     sprintf@flag:
   587                           
   588                           ; 1 bytes @ 0x7
   589     0027                     	ds	1
   590     0028                     sprintf@prec:
   591                           
   592                           ; 1 bytes @ 0x8
   593     0028                     	ds	1
   594     0029                     sprintf@val:
   595                           
   596                           ; 2 bytes @ 0x9
   597     0029                     	ds	2
   598     002B                     sprintf@sp:
   599                           
   600                           ; 1 bytes @ 0xB
   601     002B                     	ds	1
   602     002C                     sprintf@c:
   603                           
   604                           ; 1 bytes @ 0xC
   605     002C                     	ds	1
   606     002D                     ??_main:
   607                           
   608                           ; 1 bytes @ 0xD
   609     002D                     	ds	3
   610     0030                     main@str:
   611                           
   612                           ; 2 bytes @ 0x10
   613     0030                     	ds	2
   614     0032                     main@i:
   615                           
   616                           ; 2 bytes @ 0x12
   617     0032                     	ds	2
   618                           
   619                           	psect	maintext
   620     05EF                     __pmaintext:	
   621 ;;
   622 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   623 ;;
   624 ;; *************** function _main *****************
   625 ;; Defined at:
   626 ;;		line 30 in file "main.c"
   627 ;; Parameters:    Size  Location     Type
   628 ;;		None
   629 ;; Auto vars:     Size  Location     Type
   630 ;;  str             2   16[BANK0 ] unsigned char [2]
   631 ;;  i               2   18[BANK0 ] int 
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : B00/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   641 ;;      Params:         0       0       0       0       0
   642 ;;      Locals:         0       4       0       0       0
   643 ;;      Temps:          0       3       0       0       0
   644 ;;      Totals:         0       7       0       0       0
   645 ;;Total ram usage:        7 bytes
   646 ;; Hardware stack levels required when called: 6
   647 ;; This function calls:
   648 ;;		_I2C_Master_Init
   649 ;;		_LCD_Init
   650 ;;		_LCD_Set_Cursor
   651 ;;		_LCD_Write_String
   652 ;;		_sprintf
   653 ;; This function is called by:
   654 ;;		Startup code after reset
   655 ;; This function uses a non-reentrant model
   656 ;;
   657                           
   658     05EF                     _main:	
   659                           ;psect for function _main
   660                           
   661     05EF                     l1325:	
   662                           ;incstack = 0
   663                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   664                           
   665                           
   666                           ;main.c: 32:     I2C_Master_Init();
   667     05EF  120A  118A  245E  120A  118A  	fcall	_I2C_Master_Init
   668     05F4                     l1327:
   669                           
   670                           ;main.c: 34:     LCD_Init(0x4E);
   671     05F4  304E               	movlw	78
   672     05F5  120A  118A  267F  120A  118A  	fcall	_LCD_Init
   673     05FA                     l1329:
   674                           
   675                           ;main.c: 35:     LCD_Set_Cursor(1, 1);
   676     05FA  01F7               	clrf	LCD_Set_Cursor@COL
   677     05FB  0AF7               	incf	LCD_Set_Cursor@COL,f
   678     05FC  3001               	movlw	1
   679     05FD  120A  118A  24F9  120A  118A  	fcall	_LCD_Set_Cursor
   680     0602                     l1331:
   681                           
   682                           ;main.c: 36:     LCD_Write_String("Ricardo");
   683     0602  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   684     0603  00F7               	movwf	LCD_Write_String@Str
   685     0604  3080               	movlw	128
   686     0605  00F8               	movwf	LCD_Write_String@Str+1
   687     0606  120A  118A  2569  120A  118A  	fcall	_LCD_Write_String
   688     060B                     l1333:
   689                           
   690                           ;main.c: 37:     LCD_Set_Cursor(2, 1);
   691     060B  01F7               	clrf	LCD_Set_Cursor@COL
   692     060C  0AF7               	incf	LCD_Set_Cursor@COL,f
   693     060D  3002               	movlw	2
   694     060E  120A  118A  24F9  120A  118A  	fcall	_LCD_Set_Cursor
   695     0613                     l1335:
   696                           
   697                           ;main.c: 38:     LCD_Write_String("Daniel");
   698     0613  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   699     0614  00F7               	movwf	LCD_Write_String@Str
   700     0615  3080               	movlw	128
   701     0616  00F8               	movwf	LCD_Write_String@Str+1
   702     0617  120A  118A  2569  120A  118A  	fcall	_LCD_Write_String
   703     061C                     l1337:
   704                           
   705                           ;main.c: 39:     TRISD = 0b00000000;
   706     061C  1683               	bsf	3,5	;RP0=1, select bank1
   707     061D  1303               	bcf	3,6	;RP1=0, select bank1
   708     061E  0188               	clrf	8	;volatile
   709     061F                     l1339:
   710                           
   711                           ;main.c: 42:       int i;;main.c: 43:       for (i = 0; i<10; i++){
   712     061F  1283               	bcf	3,5	;RP0=0, select bank0
   713     0620  1303               	bcf	3,6	;RP1=0, select bank0
   714     0621  01B2               	clrf	main@i
   715     0622  01B3               	clrf	main@i+1
   716     0623                     l22:
   717                           
   718                           ;main.c: 44:         RD7 = 0;
   719     0623  1283               	bcf	3,5	;RP0=0, select bank0
   720     0624  1303               	bcf	3,6	;RP1=0, select bank0
   721     0625  1388               	bcf	8,7	;volatile
   722     0626                     l1345:
   723                           
   724                           ;main.c: 45:         _delay((unsigned long)((200)*(16000000/4000.0)));
   725     0626  3005               	movlw	5
   726     0627  1283               	bcf	3,5	;RP0=0, select bank0
   727     0628  1303               	bcf	3,6	;RP1=0, select bank0
   728     0629  00AF               	movwf	??_main+2
   729     062A  300F               	movlw	15
   730     062B  00AE               	movwf	??_main+1
   731     062C  30F0               	movlw	240
   732     062D  00AD               	movwf	??_main
   733     062E                     u617:
   734     062E  0BAD               	decfsz	??_main,f
   735     062F  2E2E               	goto	u617
   736     0630  0BAE               	decfsz	??_main+1,f
   737     0631  2E2E               	goto	u617
   738     0632  0BAF               	decfsz	??_main+2,f
   739     0633  2E2E               	goto	u617
   740     0634  0000               	nop
   741     0635                     l1347:
   742                           
   743                           ;main.c: 46:         RD7 = 1;
   744     0635  1283               	bcf	3,5	;RP0=0, select bank0
   745     0636  1303               	bcf	3,6	;RP1=0, select bank0
   746     0637  1788               	bsf	8,7	;volatile
   747                           
   748                           ;main.c: 47:         _delay((unsigned long)((200)*(16000000/4000.0)));
   749     0638  3005               	movlw	5
   750     0639  1283               	bcf	3,5	;RP0=0, select bank0
   751     063A  1303               	bcf	3,6	;RP1=0, select bank0
   752     063B  00AF               	movwf	??_main+2
   753     063C  300F               	movlw	15
   754     063D  00AE               	movwf	??_main+1
   755     063E  30F0               	movlw	240
   756     063F  00AD               	movwf	??_main
   757     0640                     u627:
   758     0640  0BAD               	decfsz	??_main,f
   759     0641  2E40               	goto	u627
   760     0642  0BAE               	decfsz	??_main+1,f
   761     0643  2E40               	goto	u627
   762     0644  0BAF               	decfsz	??_main+2,f
   763     0645  2E40               	goto	u627
   764     0646  0000               	nop
   765     0647                     l1349:
   766                           
   767                           ;main.c: 48:         LCD_Set_Cursor(1, 14);
   768     0647  300E               	movlw	14
   769     0648  00F7               	movwf	LCD_Set_Cursor@COL
   770     0649  3001               	movlw	1
   771     064A  120A  118A  24F9  120A  118A  	fcall	_LCD_Set_Cursor
   772     064F                     l1351:
   773                           
   774                           ;main.c: 50:         char str[2];;main.c: 51:         sprintf(str, "%d", i);
   775     064F  301A               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   776     0650  1283               	bcf	3,5	;RP0=0, select bank0
   777     0651  1303               	bcf	3,6	;RP1=0, select bank0
   778     0652  00A0               	movwf	sprintf@f
   779     0653  0833               	movf	main@i+1,w
   780     0654  00A2               	movwf	?_sprintf+2
   781     0655  0832               	movf	main@i,w
   782     0656  00A1               	movwf	?_sprintf+1
   783     0657  3030               	movlw	(low (main@str| 0))& (0+255)
   784     0658  120A  118A  271B  120A  118A  	fcall	_sprintf
   785     065D                     l1353:
   786                           
   787                           ;main.c: 52:         LCD_Write_String(str);
   788     065D  3030               	movlw	(low (main@str| 0))& (0+255)
   789     065E  00F7               	movwf	LCD_Write_String@Str
   790     065F  3000               	movlw	0
   791     0660  00F8               	movwf	LCD_Write_String@Str+1
   792     0661  120A  118A  2569  120A  118A  	fcall	_LCD_Write_String
   793     0666                     l1355:
   794                           
   795                           ;main.c: 53:       }
   796     0666  3001               	movlw	1
   797     0667  1283               	bcf	3,5	;RP0=0, select bank0
   798     0668  1303               	bcf	3,6	;RP1=0, select bank0
   799     0669  07B2               	addwf	main@i,f
   800     066A  1803               	skipnc
   801     066B  0AB3               	incf	main@i+1,f
   802     066C  3000               	movlw	0
   803     066D  07B3               	addwf	main@i+1,f
   804     066E                     l1357:
   805     066E  0833               	movf	main@i+1,w
   806     066F  3A80               	xorlw	128
   807     0670  00FF               	movwf	btemp+1
   808     0671  3080               	movlw	128
   809     0672  027F               	subwf	btemp+1,w
   810     0673  1D03               	skipz
   811     0674  2E77               	goto	u595
   812     0675  300A               	movlw	10
   813     0676  0232               	subwf	main@i,w
   814     0677                     u595:
   815     0677  1C03               	skipc
   816     0678  2E7A               	goto	u591
   817     0679  2E7B               	goto	u590
   818     067A                     u591:
   819     067A  2E23               	goto	l22
   820     067B                     u590:
   821     067B  2E1F               	goto	l1339
   822     067C  120A  118A  2801   	ljmp	start
   823     067F                     __end_of_main:
   824                           
   825                           	psect	text1
   826     071B                     __ptext1:	
   827 ;; *************** function _sprintf *****************
   828 ;; Defined at:
   829 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
   830 ;; Parameters:    Size  Location     Type
   831 ;;  sp              1    wreg     PTR unsigned char 
   832 ;;		 -> main@str(2), 
   833 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   834 ;;		 -> STR_3(3), 
   835 ;; Auto vars:     Size  Location     Type
   836 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   837 ;;		 -> main@str(2), 
   838 ;;  tmpval          4    0        struct .
   839 ;;  val             2    9[BANK0 ] unsigned int 
   840 ;;  cp              2    0        PTR const unsigned char 
   841 ;;  len             2    0        unsigned int 
   842 ;;  c               1   12[BANK0 ] unsigned char 
   843 ;;  prec            1    8[BANK0 ] char 
   844 ;;  flag            1    7[BANK0 ] unsigned char 
   845 ;;  ap              1    6[BANK0 ] PTR void [1]
   846 ;;		 -> ?_sprintf(2), 
   847 ;; Return value:  Size  Location     Type
   848 ;;                  2    0[BANK0 ] int 
   849 ;; Registers used:
   850 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   856 ;;      Params:         0       3       0       0       0
   857 ;;      Locals:         0       7       0       0       0
   858 ;;      Temps:          0       3       0       0       0
   859 ;;      Totals:         0      13       0       0       0
   860 ;;Total ram usage:       13 bytes
   861 ;; Hardware stack levels used: 1
   862 ;; Hardware stack levels required when called: 1
   863 ;; This function calls:
   864 ;;		___lwdiv
   865 ;;		___lwmod
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871     071B                     _sprintf:	
   872                           ;psect for function _sprintf
   873                           
   874                           
   875                           ;incstack = 0
   876                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   877                           ;sprintf@sp stored from wreg
   878     071B  1283               	bcf	3,5	;RP0=0, select bank0
   879     071C  1303               	bcf	3,6	;RP1=0, select bank0
   880     071D  00AB               	movwf	sprintf@sp
   881     071E                     l1261:
   882                           
   883                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   884     071E  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   885     071F  00A6               	movwf	sprintf@ap
   886                           
   887                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   888     0720  2FE0               	goto	l1315
   889     0721                     l1263:
   890                           
   891                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   892     0721  3025               	movlw	37
   893     0722  062C               	xorwf	sprintf@c,w
   894     0723  1903               	btfsc	3,2
   895     0724  2F26               	goto	u521
   896     0725  2F27               	goto	u520
   897     0726                     u521:
   898     0726  2F31               	goto	l1269
   899     0727                     u520:
   900     0727                     l1265:
   901                           
   902                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   903     0727  082B               	movf	sprintf@sp,w
   904     0728  0084               	movwf	4
   905     0729  082C               	movf	sprintf@c,w
   906     072A  1383               	bcf	3,7	;select IRP bank0
   907     072B  0080               	movwf	0
   908     072C                     l1267:
   909     072C  3001               	movlw	1
   910     072D  00FF               	movwf	btemp+1
   911     072E  087F               	movf	btemp+1,w
   912     072F  07AB               	addwf	sprintf@sp,f
   913                           
   914                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 559:    continue;
   915     0730  2FE0               	goto	l1315
   916     0731                     l1269:
   917                           
   918                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   919     0731  01A7               	clrf	sprintf@flag
   920     0732                     l1273:	
   921                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   922                           
   923     0732  3001               	movlw	1
   924     0733  07A0               	addwf	sprintf@f,f
   925     0734  30FF               	movlw	-1
   926     0735  0720               	addwf	sprintf@f,w
   927     0736  0084               	movwf	4
   928     0737  120A  118A  200E  120A  118A  	fcall	stringdir
   929     073C  00AC               	movwf	sprintf@c
   930     073D  00A3               	movwf	??_sprintf
   931     073E  01A4               	clrf	??_sprintf+1
   932                           
   933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   934                           ; Switch size 1, requested type "simple"
   935                           ; Number of cases is 1, Range of values is 0 to 0
   936                           ; switch strategies available:
   937                           ; Name         Instructions Cycles
   938                           ; simple_byte            4     3 (average)
   939                           ; direct_byte           11     8 (fixed)
   940                           ; jumptable            260     6 (fixed)
   941                           ;	Chosen strategy is simple_byte
   942     073F  0824               	movf	??_sprintf+1,w
   943     0740  3A00               	xorlw	0	; case 0
   944     0741  1903               	skipnz
   945     0742  2F44               	goto	l1445
   946     0743  2FE0               	goto	l1315
   947     0744                     l1445:
   948                           
   949                           ; Switch size 1, requested type "simple"
   950                           ; Number of cases is 3, Range of values is 0 to 105
   951                           ; switch strategies available:
   952                           ; Name         Instructions Cycles
   953                           ; simple_byte           10     6 (average)
   954                           ; jumptable            260     6 (fixed)
   955                           ;	Chosen strategy is simple_byte
   956     0744  0823               	movf	??_sprintf,w
   957     0745  3A00               	xorlw	0	; case 0
   958     0746  1903               	skipnz
   959     0747  2FF0               	goto	l1317
   960     0748  3A64               	xorlw	100	; case 100
   961     0749  1903               	skipnz
   962     074A  2F4F               	goto	l1275
   963     074B  3A0D               	xorlw	13	; case 105
   964     074C  1903               	skipnz
   965     074D  2F4F               	goto	l1275
   966     074E  2FE0               	goto	l1315
   967     074F                     l1275:
   968                           
   969                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   970     074F  0826               	movf	sprintf@ap,w
   971     0750  0084               	movwf	4
   972     0751  1383               	bcf	3,7	;select IRP bank0
   973     0752  0800               	movf	0,w
   974     0753  00A9               	movwf	sprintf@val
   975     0754  0A84               	incf	4,f
   976     0755  0800               	movf	0,w
   977     0756  00AA               	movwf	sprintf@val+1
   978     0757                     l1277:
   979     0757  3002               	movlw	2
   980     0758  00FF               	movwf	btemp+1
   981     0759  087F               	movf	btemp+1,w
   982     075A  07A6               	addwf	sprintf@ap,f
   983     075B                     l1279:
   984                           
   985                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
   986     075B  1FAA               	btfss	sprintf@val+1,7
   987     075C  2F5E               	goto	u531
   988     075D  2F5F               	goto	u530
   989     075E                     u531:
   990     075E  2F68               	goto	l1285
   991     075F                     u530:
   992     075F                     l1281:
   993                           
   994                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
   995     075F  3003               	movlw	3
   996     0760  00FF               	movwf	btemp+1
   997     0761  087F               	movf	btemp+1,w
   998     0762  04A7               	iorwf	sprintf@flag,f
   999     0763                     l1283:
  1000                           
  1001                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1002     0763  09A9               	comf	sprintf@val,f
  1003     0764  09AA               	comf	sprintf@val+1,f
  1004     0765  0AA9               	incf	sprintf@val,f
  1005     0766  1903               	skipnz
  1006     0767  0AAA               	incf	sprintf@val+1,f
  1007     0768                     l1285:
  1008                           
  1009                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1010     0768  01AC               	clrf	sprintf@c
  1011     0769  0AAC               	incf	sprintf@c,f
  1012     076A                     l1291:
  1013                           
  1014                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1015     076A  082C               	movf	sprintf@c,w
  1016     076B  00A3               	movwf	??_sprintf
  1017     076C  0723               	addwf	??_sprintf,w
  1018     076D  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1019     076E  0084               	movwf	4
  1020     076F  120A  118A  200E  120A  118A  	fcall	stringdir
  1021     0774  00A4               	movwf	??_sprintf+1
  1022     0775  120A  118A  200E  120A  118A  	fcall	stringdir
  1023     077A  00A5               	movwf	??_sprintf+2
  1024     077B  0825               	movf	??_sprintf+2,w
  1025     077C  022A               	subwf	sprintf@val+1,w
  1026     077D  1D03               	skipz
  1027     077E  2F81               	goto	u545
  1028     077F  0824               	movf	??_sprintf+1,w
  1029     0780  0229               	subwf	sprintf@val,w
  1030     0781                     u545:
  1031     0781  1803               	skipnc
  1032     0782  2F84               	goto	u541
  1033     0783  2F85               	goto	u540
  1034     0784                     u541:
  1035     0784  2F86               	goto	l1295
  1036     0785                     u540:
  1037     0785  2F90               	goto	l1299
  1038     0786                     l1295:
  1039     0786  3001               	movlw	1
  1040     0787  00FF               	movwf	btemp+1
  1041     0788  087F               	movf	btemp+1,w
  1042     0789  07AC               	addwf	sprintf@c,f
  1043     078A                     l1297:
  1044     078A  3005               	movlw	5
  1045     078B  062C               	xorwf	sprintf@c,w
  1046     078C  1D03               	btfss	3,2
  1047     078D  2F8F               	goto	u551
  1048     078E  2F90               	goto	u550
  1049     078F                     u551:
  1050     078F  2F6A               	goto	l1291
  1051     0790                     u550:
  1052     0790                     l1299:
  1053                           
  1054                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1055     0790  0827               	movf	sprintf@flag,w
  1056     0791  3903               	andlw	3
  1057     0792  1903               	btfsc	3,2
  1058     0793  2F95               	goto	u561
  1059     0794  2F96               	goto	u560
  1060     0795                     u561:
  1061     0795  2F9F               	goto	l1305
  1062     0796                     u560:
  1063     0796                     l1301:
  1064                           
  1065                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1066     0796  082B               	movf	sprintf@sp,w
  1067     0797  0084               	movwf	4
  1068     0798  302D               	movlw	45
  1069     0799  1383               	bcf	3,7	;select IRP bank0
  1070     079A  0080               	movwf	0
  1071     079B                     l1303:
  1072     079B  3001               	movlw	1
  1073     079C  00FF               	movwf	btemp+1
  1074     079D  087F               	movf	btemp+1,w
  1075     079E  07AB               	addwf	sprintf@sp,f
  1076     079F                     l1305:
  1077                           
  1078                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1079     079F  082C               	movf	sprintf@c,w
  1080     07A0  00A8               	movwf	sprintf@prec
  1081                           
  1082                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1083     07A1  2FD7               	goto	l1313
  1084     07A2                     l1307:
  1085                           
  1086                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1087     07A2  300A               	movlw	10
  1088     07A3  00F8               	movwf	___lwmod@divisor
  1089     07A4  3000               	movlw	0
  1090     07A5  00F9               	movwf	___lwmod@divisor+1
  1091     07A6  0828               	movf	sprintf@prec,w
  1092     07A7  00A3               	movwf	??_sprintf
  1093     07A8  0723               	addwf	??_sprintf,w
  1094     07A9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1095     07AA  0084               	movwf	4
  1096     07AB  120A  118A  200E  120A  118A  	fcall	stringdir
  1097     07B0  00F1               	movwf	___lwdiv@divisor
  1098     07B1  120A  118A  200E  120A  118A  	fcall	stringdir
  1099     07B6  00F2               	movwf	___lwdiv@divisor+1
  1100     07B7  082A               	movf	sprintf@val+1,w
  1101     07B8  00F4               	movwf	___lwdiv@dividend+1
  1102     07B9  0829               	movf	sprintf@val,w
  1103     07BA  00F3               	movwf	___lwdiv@dividend
  1104     07BB  120A  118A  25AB  120A  118A  	fcall	___lwdiv
  1105     07C0  0872               	movf	?___lwdiv+1,w
  1106     07C1  00FB               	movwf	___lwmod@dividend+1
  1107     07C2  0871               	movf	?___lwdiv,w
  1108     07C3  00FA               	movwf	___lwmod@dividend
  1109     07C4  120A  118A  252F  120A  118A  	fcall	___lwmod
  1110     07C9  0878               	movf	?___lwmod,w
  1111     07CA  3E30               	addlw	48
  1112     07CB  1283               	bcf	3,5	;RP0=0, select bank0
  1113     07CC  1303               	bcf	3,6	;RP1=0, select bank0
  1114     07CD  00AC               	movwf	sprintf@c
  1115     07CE                     l1309:
  1116                           
  1117                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1118     07CE  082B               	movf	sprintf@sp,w
  1119     07CF  0084               	movwf	4
  1120     07D0  082C               	movf	sprintf@c,w
  1121     07D1  1383               	bcf	3,7	;select IRP bank0
  1122     07D2  0080               	movwf	0
  1123     07D3                     l1311:
  1124     07D3  3001               	movlw	1
  1125     07D4  00FF               	movwf	btemp+1
  1126     07D5  087F               	movf	btemp+1,w
  1127     07D6  07AB               	addwf	sprintf@sp,f
  1128     07D7                     l1313:
  1129                           
  1130                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1131     07D7  30FF               	movlw	255
  1132     07D8  00FF               	movwf	btemp+1
  1133     07D9  087F               	movf	btemp+1,w
  1134     07DA  07A8               	addwf	sprintf@prec,f
  1135     07DB  0A28               	incf	sprintf@prec,w
  1136     07DC  1D03               	btfss	3,2
  1137     07DD  2FDF               	goto	u571
  1138     07DE  2FE0               	goto	u570
  1139     07DF                     u571:
  1140     07DF  2FA2               	goto	l1307
  1141     07E0                     u570:
  1142     07E0                     l1315:
  1143                           
  1144                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1145     07E0  3001               	movlw	1
  1146     07E1  07A0               	addwf	sprintf@f,f
  1147     07E2  30FF               	movlw	-1
  1148     07E3  0720               	addwf	sprintf@f,w
  1149     07E4  0084               	movwf	4
  1150     07E5  120A  118A  200E  120A  118A  	fcall	stringdir
  1151     07EA  00AC               	movwf	sprintf@c
  1152     07EB  082C               	movf	sprintf@c,w
  1153     07EC  1D03               	btfss	3,2
  1154     07ED  2FEF               	goto	u581
  1155     07EE  2FF0               	goto	u580
  1156     07EF                     u581:
  1157     07EF  2F21               	goto	l1263
  1158     07F0                     u580:
  1159     07F0                     l1317:
  1160                           
  1161                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1162     07F0  082B               	movf	sprintf@sp,w
  1163     07F1  0084               	movwf	4
  1164     07F2  1383               	bcf	3,7	;select IRP bank0
  1165     07F3  0180               	clrf	0
  1166     07F4                     l259:
  1167     07F4  0008               	return
  1168     07F5                     __end_of_sprintf:
  1169                           
  1170                           	psect	text2
  1171     052F                     __ptext2:	
  1172 ;; *************** function ___lwmod *****************
  1173 ;; Defined at:
  1174 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;  divisor         2    7[COMMON] unsigned int 
  1177 ;;  dividend        2    9[COMMON] unsigned int 
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  counter         1   11[COMMON] unsigned char 
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  2    7[COMMON] unsigned int 
  1182 ;; Registers used:
  1183 ;;		wreg, status,2, status,0, btemp+1
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1189 ;;      Params:         4       0       0       0       0
  1190 ;;      Locals:         1       0       0       0       0
  1191 ;;      Temps:          0       0       0       0       0
  1192 ;;      Totals:         5       0       0       0       0
  1193 ;;Total ram usage:        5 bytes
  1194 ;; Hardware stack levels used: 1
  1195 ;; This function calls:
  1196 ;;		Nothing
  1197 ;; This function is called by:
  1198 ;;		_sprintf
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202     052F                     ___lwmod:	
  1203                           ;psect for function ___lwmod
  1204                           
  1205     052F                     l1167:	
  1206                           ;incstack = 0
  1207                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1208                           
  1209     052F  0878               	movf	___lwmod@divisor,w
  1210     0530  0479               	iorwf	___lwmod@divisor+1,w
  1211     0531  1903               	btfsc	3,2
  1212     0532  2D34               	goto	u431
  1213     0533  2D35               	goto	u430
  1214     0534                     u431:
  1215     0534  2D64               	goto	l1185
  1216     0535                     u430:
  1217     0535                     l1169:
  1218     0535  01FC               	clrf	___lwmod@counter
  1219     0536  0AFC               	incf	___lwmod@counter,f
  1220     0537  2D43               	goto	l1175
  1221     0538                     l1171:
  1222     0538  3001               	movlw	1
  1223     0539                     u445:
  1224     0539  1003               	clrc
  1225     053A  0DF8               	rlf	___lwmod@divisor,f
  1226     053B  0DF9               	rlf	___lwmod@divisor+1,f
  1227     053C  3EFF               	addlw	-1
  1228     053D  1D03               	skipz
  1229     053E  2D39               	goto	u445
  1230     053F                     l1173:
  1231     053F  3001               	movlw	1
  1232     0540  00FF               	movwf	btemp+1
  1233     0541  087F               	movf	btemp+1,w
  1234     0542  07FC               	addwf	___lwmod@counter,f
  1235     0543                     l1175:
  1236     0543  1FF9               	btfss	___lwmod@divisor+1,7
  1237     0544  2D46               	goto	u451
  1238     0545  2D47               	goto	u450
  1239     0546                     u451:
  1240     0546  2D38               	goto	l1171
  1241     0547                     u450:
  1242     0547                     l1177:
  1243     0547  0879               	movf	___lwmod@divisor+1,w
  1244     0548  027B               	subwf	___lwmod@dividend+1,w
  1245     0549  1D03               	skipz
  1246     054A  2D4D               	goto	u465
  1247     054B  0878               	movf	___lwmod@divisor,w
  1248     054C  027A               	subwf	___lwmod@dividend,w
  1249     054D                     u465:
  1250     054D  1C03               	skipc
  1251     054E  2D50               	goto	u461
  1252     054F  2D51               	goto	u460
  1253     0550                     u461:
  1254     0550  2D57               	goto	l1181
  1255     0551                     u460:
  1256     0551                     l1179:
  1257     0551  0878               	movf	___lwmod@divisor,w
  1258     0552  02FA               	subwf	___lwmod@dividend,f
  1259     0553  0879               	movf	___lwmod@divisor+1,w
  1260     0554  1C03               	skipc
  1261     0555  03FB               	decf	___lwmod@dividend+1,f
  1262     0556  02FB               	subwf	___lwmod@dividend+1,f
  1263     0557                     l1181:
  1264     0557  3001               	movlw	1
  1265     0558                     u475:
  1266     0558  1003               	clrc
  1267     0559  0CF9               	rrf	___lwmod@divisor+1,f
  1268     055A  0CF8               	rrf	___lwmod@divisor,f
  1269     055B  3EFF               	addlw	-1
  1270     055C  1D03               	skipz
  1271     055D  2D58               	goto	u475
  1272     055E                     l1183:
  1273     055E  3001               	movlw	1
  1274     055F  02FC               	subwf	___lwmod@counter,f
  1275     0560  1D03               	btfss	3,2
  1276     0561  2D63               	goto	u481
  1277     0562  2D64               	goto	u480
  1278     0563                     u481:
  1279     0563  2D47               	goto	l1177
  1280     0564                     u480:
  1281     0564                     l1185:
  1282     0564  087B               	movf	___lwmod@dividend+1,w
  1283     0565  00F9               	movwf	?___lwmod+1
  1284     0566  087A               	movf	___lwmod@dividend,w
  1285     0567  00F8               	movwf	?___lwmod
  1286     0568                     l545:
  1287     0568  0008               	return
  1288     0569                     __end_of___lwmod:
  1289                           
  1290                           	psect	text3
  1291     05AB                     __ptext3:	
  1292 ;; *************** function ___lwdiv *****************
  1293 ;; Defined at:
  1294 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;  divisor         2    0[COMMON] unsigned int 
  1297 ;;  dividend        2    2[COMMON] unsigned int 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  quotient        2    4[COMMON] unsigned int 
  1300 ;;  counter         1    6[COMMON] unsigned char 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  2    0[COMMON] unsigned int 
  1303 ;; Registers used:
  1304 ;;		wreg, status,2, status,0, btemp+1
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1310 ;;      Params:         4       0       0       0       0
  1311 ;;      Locals:         3       0       0       0       0
  1312 ;;      Temps:          0       0       0       0       0
  1313 ;;      Totals:         7       0       0       0       0
  1314 ;;Total ram usage:        7 bytes
  1315 ;; Hardware stack levels used: 1
  1316 ;; This function calls:
  1317 ;;		Nothing
  1318 ;; This function is called by:
  1319 ;;		_sprintf
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323     05AB                     ___lwdiv:	
  1324                           ;psect for function ___lwdiv
  1325                           
  1326     05AB                     l1141:	
  1327                           ;incstack = 0
  1328                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1329                           
  1330     05AB  01F5               	clrf	___lwdiv@quotient
  1331     05AC  01F6               	clrf	___lwdiv@quotient+1
  1332     05AD                     l1143:
  1333     05AD  0871               	movf	___lwdiv@divisor,w
  1334     05AE  0472               	iorwf	___lwdiv@divisor+1,w
  1335     05AF  1903               	btfsc	3,2
  1336     05B0  2DB2               	goto	u361
  1337     05B1  2DB3               	goto	u360
  1338     05B2                     u361:
  1339     05B2  2DEA               	goto	l1163
  1340     05B3                     u360:
  1341     05B3                     l1145:
  1342     05B3  01F7               	clrf	___lwdiv@counter
  1343     05B4  0AF7               	incf	___lwdiv@counter,f
  1344     05B5  2DC1               	goto	l1151
  1345     05B6                     l1147:
  1346     05B6  3001               	movlw	1
  1347     05B7                     u375:
  1348     05B7  1003               	clrc
  1349     05B8  0DF1               	rlf	___lwdiv@divisor,f
  1350     05B9  0DF2               	rlf	___lwdiv@divisor+1,f
  1351     05BA  3EFF               	addlw	-1
  1352     05BB  1D03               	skipz
  1353     05BC  2DB7               	goto	u375
  1354     05BD                     l1149:
  1355     05BD  3001               	movlw	1
  1356     05BE  00FF               	movwf	btemp+1
  1357     05BF  087F               	movf	btemp+1,w
  1358     05C0  07F7               	addwf	___lwdiv@counter,f
  1359     05C1                     l1151:
  1360     05C1  1FF2               	btfss	___lwdiv@divisor+1,7
  1361     05C2  2DC4               	goto	u381
  1362     05C3  2DC5               	goto	u380
  1363     05C4                     u381:
  1364     05C4  2DB6               	goto	l1147
  1365     05C5                     u380:
  1366     05C5                     l1153:
  1367     05C5  3001               	movlw	1
  1368     05C6                     u395:
  1369     05C6  1003               	clrc
  1370     05C7  0DF5               	rlf	___lwdiv@quotient,f
  1371     05C8  0DF6               	rlf	___lwdiv@quotient+1,f
  1372     05C9  3EFF               	addlw	-1
  1373     05CA  1D03               	skipz
  1374     05CB  2DC6               	goto	u395
  1375     05CC  0872               	movf	___lwdiv@divisor+1,w
  1376     05CD  0274               	subwf	___lwdiv@dividend+1,w
  1377     05CE  1D03               	skipz
  1378     05CF  2DD2               	goto	u405
  1379     05D0  0871               	movf	___lwdiv@divisor,w
  1380     05D1  0273               	subwf	___lwdiv@dividend,w
  1381     05D2                     u405:
  1382     05D2  1C03               	skipc
  1383     05D3  2DD5               	goto	u401
  1384     05D4  2DD6               	goto	u400
  1385     05D5                     u401:
  1386     05D5  2DDD               	goto	l1159
  1387     05D6                     u400:
  1388     05D6                     l1155:
  1389     05D6  0871               	movf	___lwdiv@divisor,w
  1390     05D7  02F3               	subwf	___lwdiv@dividend,f
  1391     05D8  0872               	movf	___lwdiv@divisor+1,w
  1392     05D9  1C03               	skipc
  1393     05DA  03F4               	decf	___lwdiv@dividend+1,f
  1394     05DB  02F4               	subwf	___lwdiv@dividend+1,f
  1395     05DC                     l1157:
  1396     05DC  1475               	bsf	___lwdiv@quotient,0
  1397     05DD                     l1159:
  1398     05DD  3001               	movlw	1
  1399     05DE                     u415:
  1400     05DE  1003               	clrc
  1401     05DF  0CF2               	rrf	___lwdiv@divisor+1,f
  1402     05E0  0CF1               	rrf	___lwdiv@divisor,f
  1403     05E1  3EFF               	addlw	-1
  1404     05E2  1D03               	skipz
  1405     05E3  2DDE               	goto	u415
  1406     05E4                     l1161:
  1407     05E4  3001               	movlw	1
  1408     05E5  02F7               	subwf	___lwdiv@counter,f
  1409     05E6  1D03               	btfss	3,2
  1410     05E7  2DE9               	goto	u421
  1411     05E8  2DEA               	goto	u420
  1412     05E9                     u421:
  1413     05E9  2DC5               	goto	l1153
  1414     05EA                     u420:
  1415     05EA                     l1163:
  1416     05EA  0876               	movf	___lwdiv@quotient+1,w
  1417     05EB  00F2               	movwf	?___lwdiv+1
  1418     05EC  0875               	movf	___lwdiv@quotient,w
  1419     05ED  00F1               	movwf	?___lwdiv
  1420     05EE                     l535:
  1421     05EE  0008               	return
  1422     05EF                     __end_of___lwdiv:
  1423                           
  1424                           	psect	text4
  1425     0569                     __ptext4:	
  1426 ;; *************** function _LCD_Write_String *****************
  1427 ;; Defined at:
  1428 ;;		line 133 in file "I2C_LCD.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  Str             2    6[COMMON] PTR unsigned char 
  1431 ;;		 -> main@str(2), STR_2(7), STR_1(8), 
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;  i               2   11[COMMON] int 
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  1    wreg      void 
  1436 ;; Registers used:
  1437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1443 ;;      Params:         2       0       0       0       0
  1444 ;;      Locals:         2       0       0       0       0
  1445 ;;      Temps:          3       0       0       0       0
  1446 ;;      Totals:         7       0       0       0       0
  1447 ;;Total ram usage:        7 bytes
  1448 ;; Hardware stack levels used: 1
  1449 ;; Hardware stack levels required when called: 5
  1450 ;; This function calls:
  1451 ;;		_LCD_Write_Char
  1452 ;; This function is called by:
  1453 ;;		_main
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457     0569                     _LCD_Write_String:	
  1458                           ;psect for function _LCD_Write_String
  1459                           
  1460     0569                     l1253:	
  1461                           ;incstack = 0
  1462                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1463                           
  1464                           
  1465                           ;I2C_LCD.c: 133: void LCD_Write_String(char* Str);I2C_LCD.c: 134: {;I2C_LCD.c: 135:   fo
      +                          r(int i=0; Str[i]!='\0'; i++)
  1466     0569  01FC               	clrf	LCD_Write_String@i
  1467     056A  01FD               	clrf	LCD_Write_String@i+1
  1468     056B  2D8E               	goto	l1259
  1469     056C                     l1255:
  1470                           
  1471                           ;I2C_LCD.c: 136:     LCD_Write_Char(Str[i]);
  1472     056C  087C               	movf	LCD_Write_String@i,w
  1473     056D  0777               	addwf	LCD_Write_String@Str,w
  1474     056E  00FA               	movwf	??_LCD_Write_String+1
  1475     056F  0878               	movf	LCD_Write_String@Str+1,w
  1476     0570  00F9               	movwf	??_LCD_Write_String
  1477     0571  1803               	skipnc
  1478     0572  0AF9               	incf	??_LCD_Write_String,f
  1479     0573  1FFC               	btfss	LCD_Write_String@i,7
  1480     0574  2D76               	goto	u490
  1481     0575  03F9               	decf	??_LCD_Write_String,f
  1482     0576                     u490:
  1483     0576  0879               	movf	??_LCD_Write_String,w
  1484     0577  00FB               	movwf	??_LCD_Write_String+2
  1485     0578  087B               	movf	??_LCD_Write_String+2,w
  1486     0579  1283               	bcf	3,5	;RP0=0, select bank0
  1487     057A  1303               	bcf	3,6	;RP1=0, select bank0
  1488     057B  00FF               	movwf	btemp+1
  1489     057C  087A               	movf	??_LCD_Write_String+1,w
  1490     057D  0084               	movwf	4
  1491     057E  120A  118A  2004  120A  118A  	fcall	stringtab
  1492     0583  120A  118A  24DC  120A  118A  	fcall	_LCD_Write_Char
  1493     0588                     l1257:
  1494     0588  3001               	movlw	1
  1495     0589  07FC               	addwf	LCD_Write_String@i,f
  1496     058A  1803               	skipnc
  1497     058B  0AFD               	incf	LCD_Write_String@i+1,f
  1498     058C  3000               	movlw	0
  1499     058D  07FD               	addwf	LCD_Write_String@i+1,f
  1500     058E                     l1259:
  1501     058E  087C               	movf	LCD_Write_String@i,w
  1502     058F  0777               	addwf	LCD_Write_String@Str,w
  1503     0590  00FA               	movwf	??_LCD_Write_String+1
  1504     0591  0878               	movf	LCD_Write_String@Str+1,w
  1505     0592  00F9               	movwf	??_LCD_Write_String
  1506     0593  1803               	skipnc
  1507     0594  0AF9               	incf	??_LCD_Write_String,f
  1508     0595  1FFC               	btfss	LCD_Write_String@i,7
  1509     0596  2D98               	goto	u500
  1510     0597  03F9               	decf	??_LCD_Write_String,f
  1511     0598                     u500:
  1512     0598  0879               	movf	??_LCD_Write_String,w
  1513     0599  00FB               	movwf	??_LCD_Write_String+2
  1514     059A  087B               	movf	??_LCD_Write_String+2,w
  1515     059B  1283               	bcf	3,5	;RP0=0, select bank0
  1516     059C  1303               	bcf	3,6	;RP1=0, select bank0
  1517     059D  00FF               	movwf	btemp+1
  1518     059E  087A               	movf	??_LCD_Write_String+1,w
  1519     059F  0084               	movwf	4
  1520     05A0  120A  118A  2004  120A  118A  	fcall	stringtab
  1521     05A5  3A00               	xorlw	0
  1522     05A6  1D03               	skipz
  1523     05A7  2DA9               	goto	u511
  1524     05A8  2DAA               	goto	u510
  1525     05A9                     u511:
  1526     05A9  2D6C               	goto	l1255
  1527     05AA                     u510:
  1528     05AA                     l125:
  1529     05AA  0008               	return
  1530     05AB                     __end_of_LCD_Write_String:
  1531                           
  1532                           	psect	text5
  1533     04DC                     __ptext5:	
  1534 ;; *************** function _LCD_Write_Char *****************
  1535 ;; Defined at:
  1536 ;;		line 126 in file "I2C_LCD.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;  Data            1    wreg     unsigned char 
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;  Data            1    5[COMMON] unsigned char 
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1    wreg      void 
  1543 ;; Registers used:
  1544 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1550 ;;      Params:         0       0       0       0       0
  1551 ;;      Locals:         1       0       0       0       0
  1552 ;;      Temps:          1       0       0       0       0
  1553 ;;      Totals:         2       0       0       0       0
  1554 ;;Total ram usage:        2 bytes
  1555 ;; Hardware stack levels used: 1
  1556 ;; Hardware stack levels required when called: 4
  1557 ;; This function calls:
  1558 ;;		_LCD_Write_4Bit
  1559 ;; This function is called by:
  1560 ;;		_LCD_Write_String
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564     04DC                     _LCD_Write_Char:	
  1565                           ;psect for function _LCD_Write_Char
  1566                           
  1567                           
  1568                           ;incstack = 0
  1569                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1570                           ;LCD_Write_Char@Data stored from wreg
  1571     04DC  00F6               	movwf	LCD_Write_Char@Data
  1572     04DD                     l1137:
  1573                           
  1574                           ;I2C_LCD.c: 126: void LCD_Write_Char(char Data);I2C_LCD.c: 127: {;I2C_LCD.c: 128:   RS =
      +                           1;
  1575     04DD  1283               	bcf	3,5	;RP0=0, select bank0
  1576     04DE  1303               	bcf	3,6	;RP1=0, select bank0
  1577     04DF  01B5               	clrf	_RS
  1578     04E0  0AB5               	incf	_RS,f
  1579     04E1                     l1139:
  1580                           
  1581                           ;I2C_LCD.c: 129:   LCD_Write_4Bit(Data & 0xF0);
  1582     04E1  0876               	movf	LCD_Write_Char@Data,w
  1583     04E2  39F0               	andlw	240
  1584     04E3  120A  118A  2488  120A  118A  	fcall	_LCD_Write_4Bit
  1585                           
  1586                           ;I2C_LCD.c: 130:   LCD_Write_4Bit((Data << 4) & 0xF0);
  1587     04E8  0876               	movf	LCD_Write_Char@Data,w
  1588     04E9  00F5               	movwf	??_LCD_Write_Char
  1589     04EA  3003               	movlw	3
  1590     04EB                     u355:
  1591     04EB  1003               	clrc
  1592     04EC  0DF5               	rlf	??_LCD_Write_Char,f
  1593     04ED  3EFF               	addlw	-1
  1594     04EE  1D03               	skipz
  1595     04EF  2CEB               	goto	u355
  1596     04F0  1003               	clrc
  1597     04F1  0D75               	rlf	??_LCD_Write_Char,w
  1598     04F2  39F0               	andlw	240
  1599     04F3  120A  118A  2488  120A  118A  	fcall	_LCD_Write_4Bit
  1600     04F8                     l119:
  1601     04F8  0008               	return
  1602     04F9                     __end_of_LCD_Write_Char:
  1603                           
  1604                           	psect	text6
  1605     04F9                     __ptext6:	
  1606 ;; *************** function _LCD_Set_Cursor *****************
  1607 ;; Defined at:
  1608 ;;		line 139 in file "I2C_LCD.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;  ROW             1    wreg     unsigned char 
  1611 ;;  COL             1    6[COMMON] unsigned char 
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  ROW             1    9[COMMON] unsigned char 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1623 ;;      Params:         1       0       0       0       0
  1624 ;;      Locals:         1       0       0       0       0
  1625 ;;      Temps:          2       0       0       0       0
  1626 ;;      Totals:         4       0       0       0       0
  1627 ;;Total ram usage:        4 bytes
  1628 ;; Hardware stack levels used: 1
  1629 ;; Hardware stack levels required when called: 5
  1630 ;; This function calls:
  1631 ;;		_LCD_CMD
  1632 ;; This function is called by:
  1633 ;;		_main
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637     04F9                     _LCD_Set_Cursor:	
  1638                           ;psect for function _LCD_Set_Cursor
  1639                           
  1640                           
  1641                           ;incstack = 0
  1642                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1643                           ;LCD_Set_Cursor@ROW stored from wreg
  1644     04F9  00FA               	movwf	LCD_Set_Cursor@ROW
  1645     04FA                     l1237:
  1646                           
  1647                           ;I2C_LCD.c: 139: void LCD_Set_Cursor(unsigned char ROW, unsigned char COL);I2C_LCD.c: 14
      +                          0: {;I2C_LCD.c: 141:   switch(ROW)
  1648     04FA  2D1B               	goto	l1247
  1649     04FB                     l1239:
  1650                           
  1651                           ;I2C_LCD.c: 144:       LCD_CMD(0xC0 + COL-1);
  1652     04FB  0877               	movf	LCD_Set_Cursor@COL,w
  1653     04FC  3EBF               	addlw	191
  1654     04FD  120A  118A  24A3  120A  118A  	fcall	_LCD_CMD
  1655                           
  1656                           ;I2C_LCD.c: 145:       break;
  1657     0502  2D2E               	goto	l134
  1658     0503                     l1241:
  1659                           
  1660                           ;I2C_LCD.c: 147:       LCD_CMD(0x94 + COL-1);
  1661     0503  0877               	movf	LCD_Set_Cursor@COL,w
  1662     0504  3E93               	addlw	147
  1663     0505  120A  118A  24A3  120A  118A  	fcall	_LCD_CMD
  1664                           
  1665                           ;I2C_LCD.c: 148:       break;
  1666     050A  2D2E               	goto	l134
  1667     050B                     l1243:
  1668                           
  1669                           ;I2C_LCD.c: 150:       LCD_CMD(0xD4 + COL-1);
  1670     050B  0877               	movf	LCD_Set_Cursor@COL,w
  1671     050C  3ED3               	addlw	211
  1672     050D  120A  118A  24A3  120A  118A  	fcall	_LCD_CMD
  1673                           
  1674                           ;I2C_LCD.c: 151:       break;
  1675     0512  2D2E               	goto	l134
  1676     0513                     l1245:
  1677                           
  1678                           ;I2C_LCD.c: 154:       LCD_CMD(0x80 + COL-1);
  1679     0513  0877               	movf	LCD_Set_Cursor@COL,w
  1680     0514  3E7F               	addlw	127
  1681     0515  120A  118A  24A3  120A  118A  	fcall	_LCD_CMD
  1682                           
  1683                           ;I2C_LCD.c: 155:   }
  1684     051A  2D2E               	goto	l134
  1685     051B                     l1247:
  1686     051B  087A               	movf	LCD_Set_Cursor@ROW,w
  1687     051C  00F8               	movwf	??_LCD_Set_Cursor
  1688     051D  01F9               	clrf	??_LCD_Set_Cursor+1
  1689                           
  1690                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1691                           ; Switch size 1, requested type "simple"
  1692                           ; Number of cases is 1, Range of values is 0 to 0
  1693                           ; switch strategies available:
  1694                           ; Name         Instructions Cycles
  1695                           ; simple_byte            4     3 (average)
  1696                           ; direct_byte           11     8 (fixed)
  1697                           ; jumptable            260     6 (fixed)
  1698                           ;	Chosen strategy is simple_byte
  1699     051E  0879               	movf	??_LCD_Set_Cursor+1,w
  1700     051F  3A00               	xorlw	0	; case 0
  1701     0520  1903               	skipnz
  1702     0521  2D23               	goto	l1447
  1703     0522  2D13               	goto	l1245
  1704     0523                     l1447:
  1705                           
  1706                           ; Switch size 1, requested type "simple"
  1707                           ; Number of cases is 3, Range of values is 2 to 4
  1708                           ; switch strategies available:
  1709                           ; Name         Instructions Cycles
  1710                           ; simple_byte           10     6 (average)
  1711                           ; direct_byte           20    11 (fixed)
  1712                           ; jumptable            263     9 (fixed)
  1713                           ;	Chosen strategy is simple_byte
  1714     0523  0878               	movf	??_LCD_Set_Cursor,w
  1715     0524  3A02               	xorlw	2	; case 2
  1716     0525  1903               	skipnz
  1717     0526  2CFB               	goto	l1239
  1718     0527  3A01               	xorlw	1	; case 3
  1719     0528  1903               	skipnz
  1720     0529  2D03               	goto	l1241
  1721     052A  3A07               	xorlw	7	; case 4
  1722     052B  1903               	skipnz
  1723     052C  2D0B               	goto	l1243
  1724     052D  2D13               	goto	l1245
  1725     052E                     l134:
  1726     052E  0008               	return
  1727     052F                     __end_of_LCD_Set_Cursor:
  1728                           
  1729                           	psect	text7
  1730     067F                     __ptext7:	
  1731 ;; *************** function _LCD_Init *****************
  1732 ;; Defined at:
  1733 ;;		line 79 in file "I2C_LCD.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  I2C_Add         1    wreg     unsigned char 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  I2C_Add         1    9[COMMON] unsigned char 
  1738 ;; Return value:  Size  Location     Type
  1739 ;;                  1    wreg      void 
  1740 ;; Registers used:
  1741 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1747 ;;      Params:         0       0       0       0       0
  1748 ;;      Locals:         1       0       0       0       0
  1749 ;;      Temps:          3       0       0       0       0
  1750 ;;      Totals:         4       0       0       0       0
  1751 ;;Total ram usage:        4 bytes
  1752 ;; Hardware stack levels used: 1
  1753 ;; Hardware stack levels required when called: 5
  1754 ;; This function calls:
  1755 ;;		_IO_Expander_Write
  1756 ;;		_LCD_CMD
  1757 ;; This function is called by:
  1758 ;;		_main
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762     067F                     _LCD_Init:	
  1763                           ;psect for function _LCD_Init
  1764                           
  1765                           
  1766                           ;incstack = 0
  1767                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1768                           ;LCD_Init@I2C_Add stored from wreg
  1769     067F  00FA               	movwf	LCD_Init@I2C_Add
  1770     0680                     l1199:
  1771                           
  1772                           ;I2C_LCD.c: 79: void LCD_Init(unsigned char I2C_Add);I2C_LCD.c: 80: {;I2C_LCD.c: 81:   i
      +                          2c_add = I2C_Add;
  1773     0680  087A               	movf	LCD_Init@I2C_Add,w
  1774     0681  1283               	bcf	3,5	;RP0=0, select bank0
  1775     0682  1303               	bcf	3,6	;RP1=0, select bank0
  1776     0683  00B4               	movwf	_i2c_add
  1777     0684                     l1201:
  1778                           
  1779                           ;I2C_LCD.c: 82:   IO_Expander_Write(0x00);
  1780     0684  3000               	movlw	0
  1781     0685  120A  118A  24BF  120A  118A  	fcall	_IO_Expander_Write
  1782     068A                     l1203:
  1783                           
  1784                           ;I2C_LCD.c: 83:   _delay((unsigned long)((30)*(16000000/4000.0)));
  1785     068A  309C               	movlw	156
  1786     068B  00F8               	movwf	??_LCD_Init+1
  1787     068C  30D7               	movlw	215
  1788     068D  00F7               	movwf	??_LCD_Init
  1789     068E                     u637:
  1790     068E  0BF7               	decfsz	??_LCD_Init,f
  1791     068F  2E8E               	goto	u637
  1792     0690  0BF8               	decfsz	??_LCD_Init+1,f
  1793     0691  2E8E               	goto	u637
  1794     0692                     l1205:
  1795                           
  1796                           ;I2C_LCD.c: 84:   LCD_CMD(0x03);
  1797     0692  3003               	movlw	3
  1798     0693  120A  118A  24A3  120A  118A  	fcall	_LCD_CMD
  1799     0698                     l1207:
  1800                           
  1801                           ;I2C_LCD.c: 85:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1802     0698  301A               	movlw	26
  1803     0699  00F8               	movwf	??_LCD_Init+1
  1804     069A  30F8               	movlw	248
  1805     069B  00F7               	movwf	??_LCD_Init
  1806     069C                     u647:
  1807     069C  0BF7               	decfsz	??_LCD_Init,f
  1808     069D  2E9C               	goto	u647
  1809     069E  0BF8               	decfsz	??_LCD_Init+1,f
  1810     069F  2E9C               	goto	u647
  1811     06A0  0000               	nop
  1812     06A1                     l1209:
  1813                           
  1814                           ;I2C_LCD.c: 86:   LCD_CMD(0x03);
  1815     06A1  3003               	movlw	3
  1816     06A2  120A  118A  24A3  120A  118A  	fcall	_LCD_CMD
  1817     06A7                     l1211:
  1818                           
  1819                           ;I2C_LCD.c: 87:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1820     06A7  301A               	movlw	26
  1821     06A8  00F8               	movwf	??_LCD_Init+1
  1822     06A9  30F8               	movlw	248
  1823     06AA  00F7               	movwf	??_LCD_Init
  1824     06AB                     u657:
  1825     06AB  0BF7               	decfsz	??_LCD_Init,f
  1826     06AC  2EAB               	goto	u657
  1827     06AD  0BF8               	decfsz	??_LCD_Init+1,f
  1828     06AE  2EAB               	goto	u657
  1829     06AF  0000               	nop
  1830     06B0                     l1213:
  1831                           
  1832                           ;I2C_LCD.c: 88:   LCD_CMD(0x03);
  1833     06B0  3003               	movlw	3
  1834     06B1  120A  118A  24A3  120A  118A  	fcall	_LCD_CMD
  1835     06B6                     l1215:
  1836                           
  1837                           ;I2C_LCD.c: 89:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1838     06B6  301A               	movlw	26
  1839     06B7  00F8               	movwf	??_LCD_Init+1
  1840     06B8  30F8               	movlw	248
  1841     06B9  00F7               	movwf	??_LCD_Init
  1842     06BA                     u667:
  1843     06BA  0BF7               	decfsz	??_LCD_Init,f
  1844     06BB  2EBA               	goto	u667
  1845     06BC  0BF8               	decfsz	??_LCD_Init+1,f
  1846     06BD  2EBA               	goto	u667
  1847     06BE  0000               	nop
  1848     06BF                     l1217:
  1849                           
  1850                           ;I2C_LCD.c: 90:   LCD_CMD(0x02);
  1851     06BF  3002               	movlw	2
  1852     06C0  120A  118A  24A3  120A  118A  	fcall	_LCD_CMD
  1853     06C5                     l1219:
  1854                           
  1855                           ;I2C_LCD.c: 91:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1856     06C5  301A               	movlw	26
  1857     06C6  00F8               	movwf	??_LCD_Init+1
  1858     06C7  30F8               	movlw	248
  1859     06C8  00F7               	movwf	??_LCD_Init
  1860     06C9                     u677:
  1861     06C9  0BF7               	decfsz	??_LCD_Init,f
  1862     06CA  2EC9               	goto	u677
  1863     06CB  0BF8               	decfsz	??_LCD_Init+1,f
  1864     06CC  2EC9               	goto	u677
  1865     06CD  0000               	nop
  1866     06CE                     l1221:
  1867                           
  1868                           ;I2C_LCD.c: 92:   LCD_CMD(0x20 | (2 << 2));
  1869     06CE  3028               	movlw	40
  1870     06CF  120A  118A  24A3  120A  118A  	fcall	_LCD_CMD
  1871     06D4                     l1223:
  1872                           
  1873                           ;I2C_LCD.c: 93:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1874     06D4  3002               	movlw	2
  1875     06D5  00F9               	movwf	??_LCD_Init+2
  1876     06D6  3004               	movlw	4
  1877     06D7  00F8               	movwf	??_LCD_Init+1
  1878     06D8  30BA               	movlw	186
  1879     06D9  00F7               	movwf	??_LCD_Init
  1880     06DA                     u687:
  1881     06DA  0BF7               	decfsz	??_LCD_Init,f
  1882     06DB  2EDA               	goto	u687
  1883     06DC  0BF8               	decfsz	??_LCD_Init+1,f
  1884     06DD  2EDA               	goto	u687
  1885     06DE  0BF9               	decfsz	??_LCD_Init+2,f
  1886     06DF  2EDA               	goto	u687
  1887     06E0  0000               	nop
  1888     06E1                     l1225:
  1889                           
  1890                           ;I2C_LCD.c: 94:   LCD_CMD(0x0C);
  1891     06E1  300C               	movlw	12
  1892     06E2  120A  118A  24A3  120A  118A  	fcall	_LCD_CMD
  1893     06E7                     l1227:
  1894                           
  1895                           ;I2C_LCD.c: 95:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1896     06E7  3002               	movlw	2
  1897     06E8  00F9               	movwf	??_LCD_Init+2
  1898     06E9  3004               	movlw	4
  1899     06EA  00F8               	movwf	??_LCD_Init+1
  1900     06EB  30BA               	movlw	186
  1901     06EC  00F7               	movwf	??_LCD_Init
  1902     06ED                     u697:
  1903     06ED  0BF7               	decfsz	??_LCD_Init,f
  1904     06EE  2EED               	goto	u697
  1905     06EF  0BF8               	decfsz	??_LCD_Init+1,f
  1906     06F0  2EED               	goto	u697
  1907     06F1  0BF9               	decfsz	??_LCD_Init+2,f
  1908     06F2  2EED               	goto	u697
  1909     06F3  0000               	nop
  1910     06F4                     l1229:
  1911                           
  1912                           ;I2C_LCD.c: 96:   LCD_CMD(0x01);
  1913     06F4  3001               	movlw	1
  1914     06F5  120A  118A  24A3  120A  118A  	fcall	_LCD_CMD
  1915     06FA                     l1231:
  1916                           
  1917                           ;I2C_LCD.c: 97:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1918     06FA  3002               	movlw	2
  1919     06FB  00F9               	movwf	??_LCD_Init+2
  1920     06FC  3004               	movlw	4
  1921     06FD  00F8               	movwf	??_LCD_Init+1
  1922     06FE  30BA               	movlw	186
  1923     06FF  00F7               	movwf	??_LCD_Init
  1924     0700                     u707:
  1925     0700  0BF7               	decfsz	??_LCD_Init,f
  1926     0701  2F00               	goto	u707
  1927     0702  0BF8               	decfsz	??_LCD_Init+1,f
  1928     0703  2F00               	goto	u707
  1929     0704  0BF9               	decfsz	??_LCD_Init+2,f
  1930     0705  2F00               	goto	u707
  1931     0706  0000               	nop
  1932     0707                     l1233:
  1933                           
  1934                           ;I2C_LCD.c: 98:   LCD_CMD(0x04 | 0x02);
  1935     0707  3006               	movlw	6
  1936     0708  120A  118A  24A3  120A  118A  	fcall	_LCD_CMD
  1937     070D                     l1235:
  1938                           
  1939                           ;I2C_LCD.c: 99:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1940     070D  3002               	movlw	2
  1941     070E  00F9               	movwf	??_LCD_Init+2
  1942     070F  3004               	movlw	4
  1943     0710  00F8               	movwf	??_LCD_Init+1
  1944     0711  30BA               	movlw	186
  1945     0712  00F7               	movwf	??_LCD_Init
  1946     0713                     u717:
  1947     0713  0BF7               	decfsz	??_LCD_Init,f
  1948     0714  2F13               	goto	u717
  1949     0715  0BF8               	decfsz	??_LCD_Init+1,f
  1950     0716  2F13               	goto	u717
  1951     0717  0BF9               	decfsz	??_LCD_Init+2,f
  1952     0718  2F13               	goto	u717
  1953     0719  0000               	nop
  1954     071A                     l107:
  1955     071A  0008               	return
  1956     071B                     __end_of_LCD_Init:
  1957                           
  1958                           	psect	text8
  1959     04A3                     __ptext8:	
  1960 ;; *************** function _LCD_CMD *****************
  1961 ;; Defined at:
  1962 ;;		line 119 in file "I2C_LCD.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  CMD             1    wreg     unsigned char 
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;  CMD             1    5[COMMON] unsigned char 
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1    wreg      void 
  1969 ;; Registers used:
  1970 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1976 ;;      Params:         0       0       0       0       0
  1977 ;;      Locals:         1       0       0       0       0
  1978 ;;      Temps:          1       0       0       0       0
  1979 ;;      Totals:         2       0       0       0       0
  1980 ;;Total ram usage:        2 bytes
  1981 ;; Hardware stack levels used: 1
  1982 ;; Hardware stack levels required when called: 4
  1983 ;; This function calls:
  1984 ;;		_LCD_Write_4Bit
  1985 ;; This function is called by:
  1986 ;;		_LCD_Init
  1987 ;;		_LCD_Set_Cursor
  1988 ;;		_LCD_SL
  1989 ;;		_LCD_SR
  1990 ;;		_LCD_Clear
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994     04A3                     _LCD_CMD:	
  1995                           ;psect for function _LCD_CMD
  1996                           
  1997                           
  1998                           ;incstack = 0
  1999                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2000                           ;LCD_CMD@CMD stored from wreg
  2001     04A3  00F6               	movwf	LCD_CMD@CMD
  2002     04A4                     l1131:
  2003                           
  2004                           ;I2C_LCD.c: 119: void LCD_CMD(unsigned char CMD);I2C_LCD.c: 120: {;I2C_LCD.c: 121:   RS 
      +                          = 0;
  2005     04A4  1283               	bcf	3,5	;RP0=0, select bank0
  2006     04A5  1303               	bcf	3,6	;RP1=0, select bank0
  2007     04A6  01B5               	clrf	_RS
  2008     04A7                     l1133:
  2009                           
  2010                           ;I2C_LCD.c: 122:   LCD_Write_4Bit(CMD & 0xF0);
  2011     04A7  0876               	movf	LCD_CMD@CMD,w
  2012     04A8  39F0               	andlw	240
  2013     04A9  120A  118A  2488  120A  118A  	fcall	_LCD_Write_4Bit
  2014     04AE                     l1135:
  2015                           
  2016                           ;I2C_LCD.c: 123:   LCD_Write_4Bit((CMD << 4) & 0xF0);
  2017     04AE  0876               	movf	LCD_CMD@CMD,w
  2018     04AF  00F5               	movwf	??_LCD_CMD
  2019     04B0  3003               	movlw	3
  2020     04B1                     u345:
  2021     04B1  1003               	clrc
  2022     04B2  0DF5               	rlf	??_LCD_CMD,f
  2023     04B3  3EFF               	addlw	-1
  2024     04B4  1D03               	skipz
  2025     04B5  2CB1               	goto	u345
  2026     04B6  1003               	clrc
  2027     04B7  0D75               	rlf	??_LCD_CMD,w
  2028     04B8  39F0               	andlw	240
  2029     04B9  120A  118A  2488  120A  118A  	fcall	_LCD_Write_4Bit
  2030     04BE                     l116:
  2031     04BE  0008               	return
  2032     04BF                     __end_of_LCD_CMD:
  2033                           
  2034                           	psect	text9
  2035     0488                     __ptext9:	
  2036 ;; *************** function _LCD_Write_4Bit *****************
  2037 ;; Defined at:
  2038 ;;		line 110 in file "I2C_LCD.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;  Nibble          1    wreg     unsigned char 
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;  Nibble          1    3[COMMON] unsigned char 
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  1    wreg      void 
  2045 ;; Registers used:
  2046 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2052 ;;      Params:         0       0       0       0       0
  2053 ;;      Locals:         1       0       0       0       0
  2054 ;;      Temps:          1       0       0       0       0
  2055 ;;      Totals:         2       0       0       0       0
  2056 ;;Total ram usage:        2 bytes
  2057 ;; Hardware stack levels used: 1
  2058 ;; Hardware stack levels required when called: 3
  2059 ;; This function calls:
  2060 ;;		_IO_Expander_Write
  2061 ;; This function is called by:
  2062 ;;		_LCD_CMD
  2063 ;;		_LCD_Write_Char
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067     0488                     _LCD_Write_4Bit:	
  2068                           ;psect for function _LCD_Write_4Bit
  2069                           
  2070                           
  2071                           ;incstack = 0
  2072                           ; Regs used in _LCD_Write_4Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2073                           ;LCD_Write_4Bit@Nibble stored from wreg
  2074     0488  00F4               	movwf	LCD_Write_4Bit@Nibble
  2075     0489                     l1125:
  2076                           
  2077                           ;I2C_LCD.c: 110: void LCD_Write_4Bit(unsigned char Nibble);I2C_LCD.c: 111: {;I2C_LCD.c: 
      +                          113:   Nibble |= RS;
  2078     0489  1283               	bcf	3,5	;RP0=0, select bank0
  2079     048A  1303               	bcf	3,6	;RP1=0, select bank0
  2080     048B  0835               	movf	_RS,w
  2081     048C  00FF               	movwf	btemp+1
  2082     048D  087F               	movf	btemp+1,w
  2083     048E  04F4               	iorwf	LCD_Write_4Bit@Nibble,f
  2084     048F                     l1127:
  2085                           
  2086                           ;I2C_LCD.c: 114:   IO_Expander_Write(Nibble | 0x04);
  2087     048F  0874               	movf	LCD_Write_4Bit@Nibble,w
  2088     0490  3804               	iorlw	4
  2089     0491  120A  118A  24BF  120A  118A  	fcall	_IO_Expander_Write
  2090     0496                     l1129:
  2091                           
  2092                           ;I2C_LCD.c: 115:   IO_Expander_Write(Nibble & 0xFB);
  2093     0496  0874               	movf	LCD_Write_4Bit@Nibble,w
  2094     0497  39FB               	andlw	251
  2095     0498  120A  118A  24BF  120A  118A  	fcall	_IO_Expander_Write
  2096                           
  2097                           ;I2C_LCD.c: 116:   _delay((unsigned long)((50)*(16000000/4000000.0)));
  2098     049D  3042               	movlw	66
  2099     049E  00F3               	movwf	??_LCD_Write_4Bit
  2100     049F                     u727:
  2101     049F  0BF3               	decfsz	??_LCD_Write_4Bit,f
  2102     04A0  2C9F               	goto	u727
  2103     04A1  0000               	nop
  2104     04A2                     l113:
  2105     04A2  0008               	return
  2106     04A3                     __end_of_LCD_Write_4Bit:
  2107                           
  2108                           	psect	text10
  2109     04BF                     __ptext10:	
  2110 ;; *************** function _IO_Expander_Write *****************
  2111 ;; Defined at:
  2112 ;;		line 102 in file "I2C_LCD.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;  Data            1    wreg     unsigned char 
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  Data            1    1[COMMON] unsigned char 
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  1    wreg      void 
  2119 ;; Registers used:
  2120 ;;		wreg, status,2, status,0, pclath, cstack
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2126 ;;      Params:         0       0       0       0       0
  2127 ;;      Locals:         1       0       0       0       0
  2128 ;;      Temps:          0       0       0       0       0
  2129 ;;      Totals:         1       0       0       0       0
  2130 ;;Total ram usage:        1 bytes
  2131 ;; Hardware stack levels used: 1
  2132 ;; Hardware stack levels required when called: 2
  2133 ;; This function calls:
  2134 ;;		_I2C_Master_Start
  2135 ;;		_I2C_Master_Stop
  2136 ;;		_I2C_Master_Write
  2137 ;; This function is called by:
  2138 ;;		_LCD_Init
  2139 ;;		_LCD_Write_4Bit
  2140 ;;		_Backlight
  2141 ;;		_noBacklight
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145     04BF                     _IO_Expander_Write:	
  2146                           ;psect for function _IO_Expander_Write
  2147                           
  2148                           
  2149                           ;incstack = 0
  2150                           ; Regs used in _IO_Expander_Write: [wreg+status,2+status,0+pclath+cstack]
  2151                           ;IO_Expander_Write@Data stored from wreg
  2152     04BF  00F2               	movwf	IO_Expander_Write@Data
  2153     04C0                     l1123:
  2154                           
  2155                           ;I2C_LCD.c: 102: void IO_Expander_Write(unsigned char Data);I2C_LCD.c: 103: {;I2C_LCD.c:
      +                           104:   I2C_Master_Start();
  2156     04C0  120A  118A  244C  120A  118A  	fcall	_I2C_Master_Start
  2157                           
  2158                           ;I2C_LCD.c: 105:   I2C_Master_Write(i2c_add);
  2159     04C5  1283               	bcf	3,5	;RP0=0, select bank0
  2160     04C6  1303               	bcf	3,6	;RP1=0, select bank0
  2161     04C7  0834               	movf	_i2c_add,w
  2162     04C8  120A  118A  2478  120A  118A  	fcall	_I2C_Master_Write
  2163                           
  2164                           ;I2C_LCD.c: 106:   I2C_Master_Write(Data | BackLight_State);
  2165     04CD  0872               	movf	IO_Expander_Write@Data,w
  2166     04CE  1283               	bcf	3,5	;RP0=0, select bank0
  2167     04CF  1303               	bcf	3,6	;RP1=0, select bank0
  2168     04D0  0436               	iorwf	_BackLight_State,w
  2169     04D1  120A  118A  2478  120A  118A  	fcall	_I2C_Master_Write
  2170                           
  2171                           ;I2C_LCD.c: 107:   I2C_Master_Stop();
  2172     04D6  120A  118A  2455  120A  118A  	fcall	_I2C_Master_Stop
  2173     04DB                     l110:
  2174     04DB  0008               	return
  2175     04DC                     __end_of_IO_Expander_Write:
  2176                           
  2177                           	psect	text11
  2178     0478                     __ptext11:	
  2179 ;; *************** function _I2C_Master_Write *****************
  2180 ;; Defined at:
  2181 ;;		line 55 in file "I2C_LCD.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  data            1    wreg     unsigned char 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;  data            1    0[COMMON] unsigned char 
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  1    wreg      unsigned char 
  2188 ;; Registers used:
  2189 ;;		wreg, status,2, status,0, pclath, cstack
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2195 ;;      Params:         0       0       0       0       0
  2196 ;;      Locals:         1       0       0       0       0
  2197 ;;      Temps:          0       0       0       0       0
  2198 ;;      Totals:         1       0       0       0       0
  2199 ;;Total ram usage:        1 bytes
  2200 ;; Hardware stack levels used: 1
  2201 ;; Hardware stack levels required when called: 1
  2202 ;; This function calls:
  2203 ;;		_I2C_Master_Wait
  2204 ;; This function is called by:
  2205 ;;		_IO_Expander_Write
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209     0478                     _I2C_Master_Write:	
  2210                           ;psect for function _I2C_Master_Write
  2211                           
  2212                           
  2213                           ;incstack = 0
  2214                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  2215                           ;I2C_Master_Write@data stored from wreg
  2216     0478  00F1               	movwf	I2C_Master_Write@data
  2217     0479                     l1119:
  2218                           
  2219                           ;I2C_LCD.c: 55: unsigned char I2C_Master_Write(unsigned char data);I2C_LCD.c: 56: {;I2C_
      +                          LCD.c: 57:   I2C_Master_Wait();
  2220     0479  120A  118A  246B  120A  118A  	fcall	_I2C_Master_Wait
  2221     047E                     l1121:
  2222                           
  2223                           ;I2C_LCD.c: 58:   SSPBUF = data;
  2224     047E  0871               	movf	I2C_Master_Write@data,w
  2225     047F  1283               	bcf	3,5	;RP0=0, select bank0
  2226     0480  1303               	bcf	3,6	;RP1=0, select bank0
  2227     0481  0093               	movwf	19	;volatile
  2228     0482                     l95:	
  2229                           ;I2C_LCD.c: 59:   while(!SSPIF);
  2230                           
  2231     0482  1D8C               	btfss	12,3	;volatile
  2232     0483  2C85               	goto	u331
  2233     0484  2C86               	goto	u330
  2234     0485                     u331:
  2235     0485  2C82               	goto	l95
  2236     0486                     u330:
  2237     0486                     l97:
  2238                           
  2239                           ;I2C_LCD.c: 60:   SSPIF = 0;
  2240     0486  118C               	bcf	12,3	;volatile
  2241     0487                     l98:	
  2242                           ;I2C_LCD.c: 61:   return ACKSTAT;;	Return value of _I2C_Master_Write is never used
  2243                           
  2244     0487  0008               	return
  2245     0488                     __end_of_I2C_Master_Write:
  2246                           
  2247                           	psect	text12
  2248     0455                     __ptext12:	
  2249 ;; *************** function _I2C_Master_Stop *****************
  2250 ;; Defined at:
  2251 ;;		line 35 in file "I2C_LCD.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;		None
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;		None
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  1    wreg      void 
  2258 ;; Registers used:
  2259 ;;		wreg, status,2, status,0, pclath, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2265 ;;      Params:         0       0       0       0       0
  2266 ;;      Locals:         0       0       0       0       0
  2267 ;;      Temps:          0       0       0       0       0
  2268 ;;      Totals:         0       0       0       0       0
  2269 ;;Total ram usage:        0 bytes
  2270 ;; Hardware stack levels used: 1
  2271 ;; Hardware stack levels required when called: 1
  2272 ;; This function calls:
  2273 ;;		_I2C_Master_Wait
  2274 ;; This function is called by:
  2275 ;;		_IO_Expander_Write
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279     0455                     _I2C_Master_Stop:	
  2280                           ;psect for function _I2C_Master_Stop
  2281                           
  2282     0455                     l1115:	
  2283                           ;incstack = 0
  2284                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  2285                           
  2286                           
  2287                           ;I2C_LCD.c: 37:   I2C_Master_Wait();
  2288     0455  120A  118A  246B  120A  118A  	fcall	_I2C_Master_Wait
  2289     045A                     l1117:
  2290                           
  2291                           ;I2C_LCD.c: 38:   PEN = 1;
  2292     045A  1683               	bsf	3,5	;RP0=1, select bank1
  2293     045B  1303               	bcf	3,6	;RP1=0, select bank1
  2294     045C  1511               	bsf	17,2	;volatile
  2295     045D                     l86:
  2296     045D  0008               	return
  2297     045E                     __end_of_I2C_Master_Stop:
  2298                           
  2299                           	psect	text13
  2300     044C                     __ptext13:	
  2301 ;; *************** function _I2C_Master_Start *****************
  2302 ;; Defined at:
  2303 ;;		line 23 in file "I2C_LCD.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;		None
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;		None
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  1    wreg      void 
  2310 ;; Registers used:
  2311 ;;		wreg, status,2, status,0, pclath, cstack
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2317 ;;      Params:         0       0       0       0       0
  2318 ;;      Locals:         0       0       0       0       0
  2319 ;;      Temps:          0       0       0       0       0
  2320 ;;      Totals:         0       0       0       0       0
  2321 ;;Total ram usage:        0 bytes
  2322 ;; Hardware stack levels used: 1
  2323 ;; Hardware stack levels required when called: 1
  2324 ;; This function calls:
  2325 ;;		_I2C_Master_Wait
  2326 ;; This function is called by:
  2327 ;;		_IO_Expander_Write
  2328 ;; This function uses a non-reentrant model
  2329 ;;
  2330                           
  2331     044C                     _I2C_Master_Start:	
  2332                           ;psect for function _I2C_Master_Start
  2333                           
  2334     044C                     l1111:	
  2335                           ;incstack = 0
  2336                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  2337                           
  2338                           
  2339                           ;I2C_LCD.c: 25:   I2C_Master_Wait();
  2340     044C  120A  118A  246B  120A  118A  	fcall	_I2C_Master_Wait
  2341     0451                     l1113:
  2342                           
  2343                           ;I2C_LCD.c: 26:   SEN = 1;
  2344     0451  1683               	bsf	3,5	;RP0=1, select bank1
  2345     0452  1303               	bcf	3,6	;RP1=0, select bank1
  2346     0453  1411               	bsf	17,0	;volatile
  2347     0454                     l80:
  2348     0454  0008               	return
  2349     0455                     __end_of_I2C_Master_Start:
  2350                           
  2351                           	psect	text14
  2352     046B                     __ptext14:	
  2353 ;; *************** function _I2C_Master_Wait *****************
  2354 ;; Defined at:
  2355 ;;		line 18 in file "I2C_LCD.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;		None
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;		None
  2360 ;; Return value:  Size  Location     Type
  2361 ;;                  1    wreg      void 
  2362 ;; Registers used:
  2363 ;;		wreg, status,2
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2369 ;;      Params:         0       0       0       0       0
  2370 ;;      Locals:         0       0       0       0       0
  2371 ;;      Temps:          0       0       0       0       0
  2372 ;;      Totals:         0       0       0       0       0
  2373 ;;Total ram usage:        0 bytes
  2374 ;; Hardware stack levels used: 1
  2375 ;; This function calls:
  2376 ;;		Nothing
  2377 ;; This function is called by:
  2378 ;;		_I2C_Master_Start
  2379 ;;		_I2C_Master_Stop
  2380 ;;		_I2C_Master_Write
  2381 ;;		_I2C_Master_RepeatedStart
  2382 ;;		_I2C_ACK
  2383 ;;		_I2C_NACK
  2384 ;;		_I2C_Read_Byte
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388     046B                     _I2C_Master_Wait:	
  2389                           ;psect for function _I2C_Master_Wait
  2390                           
  2391     046B                     l1107:	
  2392                           ;incstack = 0
  2393                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  2394                           
  2395     046B                     l74:	
  2396                           ;I2C_LCD.c: 20:   while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2397                           
  2398     046B  1683               	bsf	3,5	;RP0=1, select bank1
  2399     046C  1303               	bcf	3,6	;RP1=0, select bank1
  2400     046D  1914               	btfsc	20,2	;volatile
  2401     046E  2C70               	goto	u311
  2402     046F  2C71               	goto	u310
  2403     0470                     u311:
  2404     0470  2C6B               	goto	l74
  2405     0471                     u310:
  2406     0471                     l1109:
  2407     0471  0811               	movf	17,w	;volatile
  2408     0472  391F               	andlw	31
  2409     0473  1D03               	btfss	3,2
  2410     0474  2C76               	goto	u321
  2411     0475  2C77               	goto	u320
  2412     0476                     u321:
  2413     0476  2C6B               	goto	l74
  2414     0477                     u320:
  2415     0477                     l77:
  2416     0477  0008               	return
  2417     0478                     __end_of_I2C_Master_Wait:
  2418                           
  2419                           	psect	text15
  2420     045E                     __ptext15:	
  2421 ;; *************** function _I2C_Master_Init *****************
  2422 ;; Defined at:
  2423 ;;		line 8 in file "I2C_LCD.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;		None
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;		None
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, status,2
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2437 ;;      Params:         0       0       0       0       0
  2438 ;;      Locals:         0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0
  2440 ;;      Totals:         0       0       0       0       0
  2441 ;;Total ram usage:        0 bytes
  2442 ;; Hardware stack levels used: 1
  2443 ;; This function calls:
  2444 ;;		Nothing
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450     045E                     _I2C_Master_Init:	
  2451                           ;psect for function _I2C_Master_Init
  2452                           
  2453     045E                     l1189:	
  2454                           ;incstack = 0
  2455                           ; Regs used in _I2C_Master_Init: [wreg+status,2]
  2456                           
  2457                           
  2458                           ;I2C_LCD.c: 10:   SSPCON = 0x28;
  2459     045E  3028               	movlw	40
  2460     045F  1283               	bcf	3,5	;RP0=0, select bank0
  2461     0460  1303               	bcf	3,6	;RP1=0, select bank0
  2462     0461  0094               	movwf	20	;volatile
  2463     0462                     l1191:
  2464                           
  2465                           ;I2C_LCD.c: 11:   SSPCON2 = 0x00;
  2466     0462  1683               	bsf	3,5	;RP0=1, select bank1
  2467     0463  1303               	bcf	3,6	;RP1=0, select bank1
  2468     0464  0191               	clrf	17	;volatile
  2469     0465                     l1193:
  2470                           
  2471                           ;I2C_LCD.c: 12:   SSPSTAT = 0x00;
  2472     0465  0194               	clrf	20	;volatile
  2473                           
  2474                           ;I2C_LCD.c: 13:   SSPADD = ((16000000/4)/100000) - 1;
  2475     0466  3027               	movlw	39
  2476     0467  0093               	movwf	19	;volatile
  2477     0468                     l1195:
  2478                           
  2479                           ;I2C_LCD.c: 14:   TRISC3 = 1;
  2480     0468  1587               	bsf	7,3	;volatile
  2481     0469                     l1197:
  2482                           
  2483                           ;I2C_LCD.c: 15:   TRISC4 = 1;
  2484     0469  1607               	bsf	7,4	;volatile
  2485     046A                     l71:
  2486     046A  0008               	return
  2487     046B                     __end_of_I2C_Master_Init:
  2488     007E                     btemp	set	126	;btemp
  2489     007E                     wtemp0	set	126
  2490                           
  2491                           	psect	config
  2492                           
  2493                           ;Config register CONFIG1 @ 0x2007
  2494                           ;	Oscillator Selection bits
  2495                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2496                           ;	Watchdog Timer Enable bit
  2497                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2498                           ;	Power-up Timer Enable bit
  2499                           ;	PWRTE = OFF, PWRT disabled
  2500                           ;	RE3/MCLR pin function select bit
  2501                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  2502                           ;	Code Protection bit
  2503                           ;	CP = OFF, Program memory code protection is disabled
  2504                           ;	Data Code Protection bit
  2505                           ;	CPD = OFF, Data memory code protection is disabled
  2506                           ;	Brown Out Reset Selection bits
  2507                           ;	BOREN = ON, BOR enabled
  2508                           ;	Internal External Switchover bit
  2509                           ;	IESO = ON, Internal/External Switchover mode is enabled
  2510                           ;	Fail-Safe Clock Monitor Enabled bit
  2511                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  2512                           ;	Low Voltage Programming Enable bit
  2513                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2514                           ;	In-Circuit Debugger Mode bit
  2515                           ;	DEBUG = 0x1, unprogrammed default
  2516     2007                     	org	8199
  2517     2007  2FF2               	dw	12274
  2518                           
  2519                           ;Config register CONFIG2 @ 0x2008
  2520                           ;	Brown-out Reset Selection bit
  2521                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2522                           ;	Flash Program Memory Self Write Enable bits
  2523                           ;	WRT = OFF, Write protection off
  2524     2008                     	org	8200
  2525     2008  3FFF               	dw	16383

Data Sizes:
    Strings     18
    Constant    10
    Data        1
    BSS         1
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     20      23
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_3(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 2
		 -> main@str(BANK0[2]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_Write_String@Str	PTR unsigned char  size(2) Largest target is 8
		 -> main@str(BANK0[2]), STR_2(CODE[7]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_LCD_Write_String
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Write_4Bit
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_CMD->_LCD_Write_4Bit
    _LCD_Write_4Bit->_IO_Expander_Write
    _IO_Expander_Write->_I2C_Master_Write

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    2454
                                             13 BANK0      7     7      0
                    _I2C_Master_Init
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     7     5      2     451
                                              6 COMMON     7     5      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       2     2      0     133
                                              4 COMMON     2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       4     3      1     471
                                              6 COMMON     4     3      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0     199
                                              6 COMMON     4     4      0
                  _IO_Expander_Write
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              2     2      0     133
                                              4 COMMON     2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_4Bit                                       2     2      0      89
                                              2 COMMON     2     2      0
                  _IO_Expander_Write
 ---------------------------------------------------------------------------------
 (4) _IO_Expander_Write                                    1     1      0      44
                                              1 COMMON     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     1     1      0      22
                                              0 COMMON     1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
   _LCD_Init
     _IO_Expander_Write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
   _LCD_Set_Cursor
     _LCD_CMD
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Write_4Bit
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               55      0       0       9        0.0%
BITBANK3            55      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     14      17       5       28.7%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      D       D       1      100.0%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      24      12        0.0%
ABS                  0      0      24       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Thu Aug 31 02:11:28 2023

                        pc 0002                         l22 0623                         l71 046A  
                       l80 0454                         l74 046B                         l77 0477  
                       l86 045D                         l95 0482                         l97 0486  
                       l98 0487                         _RS 0035                         fsr 0004  
                      l110 04DB                        l113 04A2                        l107 071A  
                      l116 04BE                        l125 05AA                        l134 052E  
                      l119 04F8                        l259 07F4                        l535 05EE  
                      l545 0568                        _RD7 0047                        u310 0471  
                      u311 0470                        u320 0477                        u400 05D6  
                      u321 0476                        u401 05D5                        u330 0486  
                      u331 0485                        u500 0598                        u420 05EA  
                      u421 05E9                        u405 05D2                        u510 05AA  
                      u430 0535                        u511 05A9                        u415 05DE  
                      u431 0534                        u360 05B3                        u520 0727  
                      _PEN 048A                        u345 04B1                        u361 05B2  
                      u521 0726                        u450 0547                        u530 075F  
                      u355 04EB                        u451 0546                        u531 075E  
                      u380 05C5                        u460 0551                        u540 0785  
                      u381 05C4                        u461 0550                        u445 0539  
                      u541 0784                        u550 0790                        u375 05B7  
                      u551 078F                        u480 0564                        u560 0796  
                      u481 0563                        u465 054D                        u561 0795  
                      u545 0781                        u617 062E                        u490 0576  
                      u570 07E0                        u707 0700                        u395 05C6  
                      u475 0558                        u571 07DF                        u627 0640  
                      u580 07F0                        _SEN 0488                        u717 0713  
                      u637 068E                        u581 07EF                        u590 067B  
                      u727 049F                        u647 069C                        u591 067A  
                      u657 06AB                        u667 06BA                        u595 0677  
                      u677 06C9                        u687 06DA                        u697 06ED  
                      fsr0 0004                        indf 0000            __end_of_LCD_CMD 04BF  
      LCD_Write_String@Str 0077             _LCD_Set_Cursor 04F9                       l1111 044C  
                     l1113 0451                       l1121 047E                       l1201 0684  
                     l1107 046B                       l1115 0455                       l1123 04C0  
                     l1131 04A4                       l1211 06A7                       l1203 068A  
                     l1109 0471                       l1117 045A                       l1125 0489  
                     l1133 04A7                       l1221 06CE                       l1213 06B0  
                     l1205 0692                       l1141 05AB                       l1301 0796  
                     l1119 0479                       l1127 048F                       l1135 04AE  
                     l1231 06FA                       l1223 06D4                       l1215 06B6  
                     l1207 0698                       l1151 05C1                       l1143 05AD  
                     l1311 07D3                       l1303 079B                       l1129 0496  
                     l1233 0707                       l1225 06E1                       l1217 06BF  
                     l1209 06A1                       l1241 0503                       l1137 04DD  
                     l1161 05E4                       l1153 05C5                       l1145 05B3  
                     l1313 07D7                       l1305 079F                       l1235 070D  
                     l1227 06E7                       l1219 06C5                       l1243 050B  
                     l1139 04E1                       l1155 05D6                       l1147 05B6  
                     l1163 05EA                       l1171 0538                       l1307 07A2  
                     l1315 07E0                       l1331 0602                       l1229 06F4  
                     l1245 0513                       l1237 04FA                       l1253 0569  
                     l1157 05DC                       l1149 05BD                       l1181 0557  
                     l1173 053F                       l1309 07CE                       l1317 07F0  
                     l1261 071E                       l1333 060B                       l1325 05EF  
                     l1191 0462                       l1239 04FB                       l1247 051B  
                     l1255 056C                       l1159 05DD                       l1183 055E  
                     l1175 0543                       l1167 052F                       l1263 0721  
                     l1351 064F                       l1335 0613                       l1327 05F4  
                     l1193 0465                       l1257 0588                       l1177 0547  
                     l1169 0535                       l1185 0564                       l1281 075F  
                     l1273 0732                       l1265 0727                       l1353 065D  
                     l1345 0626                       l1337 061C                       l1329 05FA  
                     l1195 0468                       l1259 058E                       l1179 0551  
                     l1291 076A                       l1283 0763                       l1275 074F  
                     l1267 072C                       l1355 0666                       l1347 0635  
                     l1339 061F                       l1197 0469                       l1189 045E  
                     l1285 0768                       l1277 0757                       l1445 0744  
                     l1269 0731                       l1357 066E                       l1349 0647  
                     l1199 0680                       l1447 0523                       l1295 0786  
                     l1279 075B                       l1297 078A                       l1299 0790  
                     STR_1 001E                       STR_2 0026                       STR_3 002D  
                     _RCEN 048B                       _RSEN 0489          ?_LCD_Write_String 0077  
                     _main 05EF                       btemp 007E                       start 0001  
       ??_LCD_Write_String 0079       LCD_Write_4Bit@Nibble 0074           __end_of_LCD_Init 071B  
         ?_I2C_Master_Init 0071           ?_I2C_Master_Wait 0071           ?_I2C_Master_Stop 0071  
                    ?_main 0071                      _ACKEN 048C                      _ACKDT 048D  
          __end_of___lwdiv 05EF            __end_of___lwmod 0569                      _TRISD 0088  
                    _SSPIF 0063     __end_of_LCD_Set_Cursor 052F            __end_of_dpowers 001E  
                    main@i 0032                      pclath 000A                      status 0003  
                    wtemp0 007E            __end_of_sprintf 07F5             _LCD_Write_4Bit 0488  
           _LCD_Write_Char 04DC            __initialization 07F5               __end_of_main 067F  
        _IO_Expander_Write 04BF         ?_IO_Expander_Write 0071                     ??_main 002D  
                ??_LCD_CMD 0075          ?_I2C_Master_Start 0071          ?_I2C_Master_Write 0071  
      ??_IO_Expander_Write 0072            ?_LCD_Set_Cursor 0077         ??_I2C_Master_Start 0071  
       ??_I2C_Master_Write 0071                     _SSPADD 0093                     _TRISC3 043B  
                   _TRISC4 043C                     _SSPCON 0014                     _SSPBUF 0013  
   __end_of_LCD_Write_4Bit 04A3     __end_of_LCD_Write_Char 04F9  __end_of_IO_Expander_Write 04DC  
                ??___lwdiv 0075                  ??___lwmod 007C                  ??_sprintf 0023  
  __end_of__initialization 07FC                  ?_LCD_Init 0071            ?_LCD_Write_4Bit 0071  
          ?_LCD_Write_Char 0071             __pcstackCOMMON 0071               __pidataBANK0 044B  
               __pbssBANK0 0035                 ??_LCD_Init 0077                 __pmaintext 05EF  
                  _ACKSTAT 048E                    _LCD_CMD 04A3                    _SSPCON2 0091  
                  _SSPSTAT 0094                 __stringtab 0004                    _i2c_add 0034  
                  ___lwdiv 05AB                    ___lwmod 052F           ??_LCD_Set_Cursor 0078  
                  __ptext1 071B                    __ptext2 052F                    __ptext3 05AB  
                  __ptext4 0569                    __ptext5 04DC                    __ptext6 04F9  
                  __ptext7 067F                    __ptext8 04A3                    __ptext9 0488  
                  _dpowers 0014                    _sprintf 071B                    main@str 0030  
     end_of_initialization 07FC                 LCD_CMD@CMD 0076           ??_LCD_Write_4Bit 0073  
        LCD_Write_String@i 007C           ??_LCD_Write_Char 0075           _LCD_Write_String 0569  
      start_initialization 07F5          ??_I2C_Master_Init 0071          ??_I2C_Master_Wait 0071  
        ??_I2C_Master_Stop 0071                __pdataBANK0 0036                   ?_LCD_CMD 0071  
                ___latbits 0002              __pcstackBANK0 0020                sprintf@flag 0027  
              sprintf@prec 0028                  __pnvBANK0 0034           _I2C_Master_Start 044C  
         _I2C_Master_Write 0478           ___lwdiv@dividend 0073      IO_Expander_Write@Data 0072  
                 ?___lwdiv 0071                   ?___lwmod 0078       I2C_Master_Write@data 0071  
                __pstrings 0004           ___lwdiv@quotient 0075                   ?_sprintf 0020  
                 _LCD_Init 067F                __stringbase 0013   __end_of_LCD_Write_String 05AB  
       __end_of__stringtab 0014                 sprintf@val 0029            _I2C_Master_Init 045E  
          _I2C_Master_Wait 046B            _I2C_Master_Stop 0455            ___lwdiv@divisor 0071  
          ___lwdiv@counter 0077                   __ptext10 04BF                   __ptext11 0478  
                 __ptext12 0455                   __ptext13 044C                   __ptext14 046B  
                 __ptext15 045E            _BackLight_State 0036   __end_of_I2C_Master_Start 0455  
 __end_of_I2C_Master_Write 0488         LCD_Write_Char@Data 0076                  sprintf@ap 0026  
                sprintf@sp 002B           ___lwmod@dividend 007A                  stringcode 000E  
  __end_of_I2C_Master_Init 046B    __end_of_I2C_Master_Wait 0478    __end_of_I2C_Master_Stop 045E  
          LCD_Init@I2C_Add 007A                   sprintf@c 002C                   sprintf@f 0020  
          ___lwmod@divisor 0078            ___lwmod@counter 007C                   stringdir 000E  
                 stringtab 0004          LCD_Set_Cursor@COL 0077          LCD_Set_Cursor@ROW 007A  
